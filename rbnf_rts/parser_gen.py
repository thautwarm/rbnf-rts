# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(WS='\\s+'), r(QuotedStr='"([^\\\\"]+|\\\\.)*?"'), r(Int='\\d+'), r(Ident='[a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(Term='<.*>'), l['}'], l['|'], l['{'], l[']'], l['['], l[';'], l['::='], l[':'], l[','], l[')'], l['('], ignores=['WS'], reserved_map=ImmutableMap.from_dict({'(': 'quote (', ')': 'quote )', '[': 'quote [', ']': 'quote ]', 'list': 'quote list', 'separated_list': 'quote separated_list', ',': 'quote ,', '|': 'quote |', '{': 'quote {', '}': 'quote }', ':': 'quote :', '::=': 'quote ::=', ';': 'quote ;'}), numbering={'BOF': 0, 'EOF': 1, 'quote (': 2, 'quote )': 3, 'quote [': 4, 'quote ]': 5, 'quote list': 6, 'quote separated_list': 7, 'quote ,': 8, 'quote |': 9, 'quote {': 10, 'quote }': 11, 'quote :': 12, 'quote ::=': 13, 'quote ;': 14, 'WS': 15, 'QuotedStr': 16, 'Int': 17, 'Ident': 18, 'Term': 19})



def mk_parser():
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_action(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote ( not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 3):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                    lcl_4 = prim__mk__ast('action', lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                elif (lcl_3 == 17):
                    lcl_4 = parse_actions(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 3
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_6 = prim__mk__ast('action', lcl_6)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 18):
                    lcl_4 = parse_actions(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 3
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_6 = prim__mk__ast('action', lcl_6)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_1, 'action lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'action got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_action(_slot_0, prim__state, prim__tokens):
        lr_action_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_action(lr_action_reduce, prim__state, prim__tokens)
        lr_action_try = lcl_0
        lcl_0 = lr_action_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_action_try[1]
            lcl_1 = lcl_1
            lr_action_reduce = lcl_1
            lcl_1 = lr_step_action(lr_action_reduce, prim__state, prim__tokens)
            lr_action_try = lcl_1
            lcl_1 = lr_action_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_action_reduce

    def lr_step_actions(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_1
            lcl_1 = parse_action(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = (_slot_local__1, _slot_2)
                lcl_2 = prim__mk__ast('actions', lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = (True, _slot_local__2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_actions(_slot_0, prim__state, prim__tokens):
        lr_actions_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_actions(lr_actions_reduce, prim__state, prim__tokens)
        lr_actions_try = lcl_0
        lcl_0 = lr_actions_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_actions_try[1]
            lcl_1 = lcl_1
            lr_actions_reduce = lcl_1
            lcl_1 = lr_step_actions(lr_actions_reduce, prim__state, prim__tokens)
            lr_actions_try = lcl_1
            lcl_1 = lr_actions_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_actions_reduce

    def lr_step_alts(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_1
            lcl_1 = parse_rewrite(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = (_slot_local__1, _slot_2)
                lcl_2 = prim__mk__ast('alts', lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = (True, _slot_local__2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_alts(_slot_0, prim__state, prim__tokens):
        lr_alts_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_alts(lr_alts_reduce, prim__state, prim__tokens)
        lr_alts_try = lcl_0
        lcl_0 = lr_alts_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_alts_try[1]
            lcl_1 = lcl_1
            lr_alts_reduce = lcl_1
            lcl_1 = lr_step_alts(lr_alts_reduce, prim__state, prim__tokens)
            lr_alts_try = lcl_1
            lcl_1 = lr_alts_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_alts_reduce

    def lr_step_expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_1
            lcl_1 = parse_seq(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = (_slot_local__1, _slot_2)
                lcl_2 = prim__mk__ast('expr', lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = (True, _slot_local__2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_expr(_slot_0, prim__state, prim__tokens):
        lr_expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
        lr_expr_try = lcl_0
        lcl_0 = lr_expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_expr_try[1]
            lcl_1 = lcl_1
            lr_expr_reduce = lcl_1
            lcl_1 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
            lr_expr_try = lcl_1
            lcl_1 = lr_expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_expr_reduce

    def lr_step_prods(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_prod(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast('prods', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_prods(_slot_0, prim__state, prim__tokens):
        lr_prods_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_prods(lr_prods_reduce, prim__state, prim__tokens)
        lr_prods_try = lcl_0
        lcl_0 = lr_prods_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_prods_try[1]
            lcl_1 = lcl_1
            lr_prods_reduce = lcl_1
            lcl_1 = lr_step_prods(lr_prods_reduce, prim__state, prim__tokens)
            lr_prods_try = lcl_1
            lcl_1 = lr_prods_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_prods_reduce

    def lr_step_seq(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast('seq', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_seq(_slot_0, prim__state, prim__tokens):
        lr_seq_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_seq(lr_seq_reduce, prim__state, prim__tokens)
        lr_seq_try = lcl_0
        lcl_0 = lr_seq_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_seq_try[1]
            lcl_1 = lcl_1
            lr_seq_reduce = lcl_1
            lcl_1 = lr_step_seq(lr_seq_reduce, prim__state, prim__tokens)
            lr_seq_try = lcl_1
            lcl_1 = lr_seq_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_seq_reduce

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_prods(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_slot_0, _slot_1, _slot_2)
                    lcl_3 = prim__mk__ast('START', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_action(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('action', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_action(_slot_local__1, prim__state, prim__tokens)
                lcl_3 = (True, lcl_3)
                lcl_1 = lcl_3
            elif (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('action', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_action(_slot_local__1, prim__state, prim__tokens)
                lcl_3 = (True, lcl_3)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'action lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'action got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_actions(prim__state, prim__tokens):
        lcl_0 = parse_action(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = (_slot_0,)
            lcl_1 = prim__mk__ast('actions', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_actions(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_alts(prim__state, prim__tokens):
        lcl_0 = parse_rewrite(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = (_slot_0,)
            lcl_1 = prim__mk__ast('alts', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_alts(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 2
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote ( not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 8
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote , not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = parse_expr(prim__state, prim__tokens)
                            _slot_4_check = lcl_6
                            lcl_6 = _slot_4_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_4_check
                            else:
                                lcl_7 = _slot_4_check[1]
                                lcl_7 = lcl_7
                                _slot_4 = lcl_7
                                lcl_7 = 3
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_7):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_7 = _py_local_tk
                                _slot_5 = lcl_7
                                lcl_7 = (_slot_5 is None)
                                if lcl_7:
                                    lcl_8 = prim__tokens.offset
                                    lcl_8 = (lcl_8, 'quote ) not match')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_7 = lcl_8
                                else:
                                    lcl_8 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_8 = prim__mk__ast('atom', lcl_8)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_7 = lcl_8
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 2
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote ( not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 3
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_6 = prim__mk__ast('atom', lcl_6)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 5
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ] not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0, _slot_1, _slot_2)
                        lcl_5 = prim__mk__ast('atom', lcl_5)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 3
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ) not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_slot_0, _slot_1, _slot_2)
                        lcl_5 = prim__mk__ast('atom', lcl_5)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('atom', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('atom', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('atom', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = parse_seq(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = (_slot_0,)
            lcl_1 = prim__mk__ast('expr', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_prod(prim__state, prim__tokens):
        lcl_0 = 18
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'Ident not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 13):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_2 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 9):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_2 = lcl_7
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_3_check = lcl_7
                            lcl_7 = _slot_3_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_3_check
                            else:
                                lcl_8 = _slot_3_check[1]
                                lcl_8 = lcl_8
                                _slot_3 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_4 = lcl_8
                                lcl_8 = (_slot_4 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 7):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 6):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 4):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 2):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 19):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 16):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 18):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        else:
                            lcl_7 = (_off_2, 'prod lookahead failed')
                            lcl_7 = prim__cons(lcl_7, prim__nil)
                            lcl_7 = lcl_7
                            lcl_7 = (False, lcl_7)
                            lcl_5 = lcl_7
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_off_2, 'prod got EOF')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 12):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_2 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 9):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_2 = lcl_7
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_3_check = lcl_7
                            lcl_7 = _slot_3_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_3_check
                            else:
                                lcl_8 = _slot_3_check[1]
                                lcl_8 = lcl_8
                                _slot_3 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_4 = lcl_8
                                lcl_8 = (_slot_4 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 7):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 6):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 4):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 2):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 19):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 16):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 18):
                            lcl_7 = parse_alts(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 14
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ; not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_9 = prim__mk__ast('prod', lcl_9)
                                    _slot_local__1 = lcl_9
                                    lcl_9 = (True, _slot_local__1)
                                    lcl_8 = lcl_9
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        else:
                            lcl_7 = (_off_2, 'prod lookahead failed')
                            lcl_7 = prim__cons(lcl_7, prim__nil)
                            lcl_7 = lcl_7
                            lcl_7 = (False, lcl_7)
                            lcl_5 = lcl_7
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_off_2, 'prod got EOF')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_1, 'prod lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'prod got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_prods(prim__state, prim__tokens):
        lcl_0 = parse_prod(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = (_slot_0,)
            lcl_1 = prim__mk__ast('prods', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_prods(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rewrite(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 10):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_action(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 11
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = (_slot_1, _slot_2, _slot_3)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_local__1)
                            lcl_6 = prim__mk__ast('rewrite', lcl_6)
                            _slot_local__2 = lcl_6
                            lcl_6 = (True, _slot_local__2)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_slot_0,)
                    lcl_4 = prim__mk__ast('rewrite', lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'rewrite got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_seq(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = (_slot_0,)
            lcl_1 = prim__mk__ast('seq', lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_seq(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
