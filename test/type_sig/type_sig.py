# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(space='\\s'), l['->'], l['*'], ignores=['space'], reserved_map=ImmutableMap.from_dict({'->': 'quote ->', '*': 'quote *'}), numbering={'BOF': 0, 'EOF': 1, 'quote ->': 2, 'quote *': 3, 'space': 4})



def mk_parser():
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_TypeApp(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_LitType(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('TypeApp', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_TypeApp(_slot_0, prim__state, prim__tokens):
        lr_TypeApp_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_TypeApp(lr_TypeApp_reduce, prim__state, prim__tokens)
        lr_TypeApp_try = lcl_0
        lcl_0 = lr_TypeApp_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_TypeApp_try[1]
            lcl_0 = lcl_0
            lr_TypeApp_reduce = lcl_0
            lcl_0 = lr_step_TypeApp(lr_TypeApp_reduce, prim__state, prim__tokens)
            lr_TypeApp_try = lcl_0
            lcl_0 = lr_TypeApp_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_TypeApp_reduce

    def parse_LitType(prim__state, prim__tokens):
        lcl_0 = 3
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote * not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('LitType', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'BOF not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Type(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'EOF not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = (_slot_0, _slot_1, _slot_2)
                    lcl_1 = prim__mk__ast('START', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_Type(prim__state, prim__tokens):
        lcl_0 = parse_TypeArrow(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('Type', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_TypeApp(prim__state, prim__tokens):
        lcl_0 = parse_LitType(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('TypeApp', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_TypeApp(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_TypeArrow(prim__state, prim__tokens):
        lcl_0 = parse_TypeApp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_2 = lcl_2.idint
                if (lcl_2 == 2):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_2 = _py_local_t
                    _slot_1 = lcl_2
                    lcl_2 = parse_TypeArrow(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = lcl_3
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_1, _slot_2)
                        _slot_local__1 = lcl_3
                        lcl_3 = (_slot_0, _slot_local__1)
                        lcl_3 = prim__mk__ast('TypeArrow', lcl_3)
                        _slot_local__2 = lcl_3
                        lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('TypeArrow', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_0, 'TypeArrow got EOF')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        return lcl_0
    return parse_START
