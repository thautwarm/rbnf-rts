# This file is automatically generated by RBNF.hs
#token=. {idint:int, colomn:int, lineno:int, val:str, name:str}
#ast=. {}
#linkedlist=a. {}
#tokens=. {offset:int}
#prim__eq::forall a. (a * a) -> bool
#prim__not__eq::forall a. (a * a) -> bool
#prim__null::forall a. a
#prim__peekable::(tokens * int) -> bool
#prim__peek::(tokens * int) -> token
#prim__mv__forward::tokens -> token
#prim__match__tk::(tokens * int) -> bool * any
#prim__tk__id::str -> int
#prim__reset::(tokens * int) -> ()
#prim__cons::forall a. (a * linkedlist a) -> linkedlist a
#prim__nil::forall a. linkedlist a
#prim__to__errs::any -> linkedlist (int * str)
#prim__to__result::any -> ast
#prim__to__any::forall a. a -> any
#prim__mk__ast::forall a. (str * a) -> ast
#prim__is__null::forall a. a -> bool
#prim__is__not__null::forall a. a -> bool
#always__true::bool
def lr_step_CommaExps(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote ,")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote , not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0, _slot_1)
        _slot_local__1 = lcl_0
        lcl_0 = parse_Exp(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_0 = _slot_2_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_2 = lcl_0
            lcl_0 = (_slot_local__1, _slot_2)
            lcl_0 = prim__mk__ast("CommaExps", lcl_0)
            _slot_local__2 = lcl_0
            lcl_0 = (True, _slot_local__2)
    return lcl_0
def lr_loop_CommaExps(_slot_0, prim__state, prim__tokens):
    lr_CommaExps_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_CommaExps(lr_CommaExps_reduce, prim__state, prim__tokens)
    lr_CommaExps_try = lcl_0
    lcl_0 = lr_CommaExps_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_CommaExps_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_CommaExps_reduce = lcl_0
        lcl_0 = lr_step_CommaExps(lr_CommaExps_reduce, prim__state, prim__tokens)
        lr_CommaExps_try = lcl_0
        # recalculate condition
        lcl_0 = lr_CommaExps_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_CommaExps_reduce
def lr_step_DotId(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote .")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote . not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0, _slot_1)
        _slot_local__1 = lcl_0
        lcl_0 = parse_Id(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_0 = _slot_2_check[1]
            lcl_0 = prim__to__result(lcl_0)
            _slot_2 = lcl_0
            lcl_0 = (_slot_local__1, _slot_2)
            lcl_0 = prim__mk__ast("DotId", lcl_0)
            _slot_local__2 = lcl_0
            lcl_0 = (True, _slot_local__2)
    return lcl_0
def lr_loop_DotId(_slot_0, prim__state, prim__tokens):
    lr_DotId_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_DotId(lr_DotId_reduce, prim__state, prim__tokens)
    lr_DotId_try = lcl_0
    lcl_0 = lr_DotId_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_DotId_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_DotId_reduce = lcl_0
        lcl_0 = lr_step_DotId(lr_DotId_reduce, prim__state, prim__tokens)
        lr_DotId_try = lcl_0
        # recalculate condition
        lcl_0 = lr_DotId_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_DotId_reduce
def lr_step_Exp(_slot_0, prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote (")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_1 = lcl_0
    lcl_0 = prim__is__null(_slot_1)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote ( not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_CommaExps(prim__state, prim__tokens)
        _slot_2_check = lcl_0
        lcl_0 = _slot_2_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_2_check
        else:
            lcl_1 = _slot_2_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__tk__id("quote )")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_3 = lcl_1
            lcl_1 = prim__is__null(_slot_3)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote ) not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = prim__tokens.offset
                _off_2 = lcl_1
                lcl_1 = prim__peekable(prim__tokens, 0)
                if lcl_1:
                    # switch
                    lcl_2 = prim__peek(prim__tokens, 0)
                    lcl_2 = lcl_2.idint
                    if lcl_2 == prim__tk__id("quote notailrec"):
                        lcl_2 = prim__mv__forward(prim__tokens)
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                        lcl_2 = prim__mk__ast("App", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (_slot_local__1,)
                        lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                        _slot_local__2 = lcl_2
                        lcl_2 = (_slot_local__2,)
                        lcl_2 = prim__mk__ast("Exp", lcl_2)
                        _slot_local__3 = lcl_2
                        lcl_2 = (True, _slot_local__3)
                        lcl_1 = lcl_2
                    elif lcl_2 == prim__tk__id("quote ("):
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_2 = prim__mk__ast("App", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (_slot_local__1,)
                        lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                        _slot_local__2 = lcl_2
                        lcl_2 = (_slot_local__2,)
                        lcl_2 = prim__mk__ast("Exp", lcl_2)
                        _slot_local__3 = lcl_2
                        lcl_2 = (True, _slot_local__3)
                        lcl_1 = lcl_2
                    else:
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_2 = prim__mk__ast("App", lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (_slot_local__1,)
                        lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                        _slot_local__2 = lcl_2
                        lcl_2 = (_slot_local__2,)
                        lcl_2 = prim__mk__ast("Exp", lcl_2)
                        _slot_local__3 = lcl_2
                        lcl_2 = (True, _slot_local__3)
                        lcl_1 = lcl_2
                else:
                    lcl_1 = (_off_2, "Exp got EOF")
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = prim__to__any(lcl_1)
                    lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
    return lcl_0
def lr_loop_Exp(_slot_0, prim__state, prim__tokens):
    lr_Exp_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_Exp(lr_Exp_reduce, prim__state, prim__tokens)
    lr_Exp_try = lcl_0
    lcl_0 = lr_Exp_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_Exp_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_Exp_reduce = lcl_0
        lcl_0 = lr_step_Exp(lr_Exp_reduce, prim__state, prim__tokens)
        lr_Exp_try = lcl_0
        # recalculate condition
        lcl_0 = lr_Exp_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_Exp_reduce
def lr_step_Ids(_slot_0, prim__state, prim__tokens):
    lcl_0 = parse_Id(prim__state, prim__tokens)
    _slot_1_check = lcl_0
    lcl_0 = _slot_1_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_1_check
    else:
        lcl_0 = _slot_1_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_1 = lcl_0
        lcl_0 = (_slot_0, _slot_1)
        lcl_0 = prim__mk__ast("Ids", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def lr_loop_Ids(_slot_0, prim__state, prim__tokens):
    lr_Ids_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_Ids(lr_Ids_reduce, prim__state, prim__tokens)
    lr_Ids_try = lcl_0
    lcl_0 = lr_Ids_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_Ids_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_Ids_reduce = lcl_0
        lcl_0 = lr_step_Ids(lr_Ids_reduce, prim__state, prim__tokens)
        lr_Ids_try = lcl_0
        # recalculate condition
        lcl_0 = lr_Ids_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_Ids_reduce
def lr_step_Stmts(_slot_0, prim__state, prim__tokens):
    lcl_0 = parse_Stmt(prim__state, prim__tokens)
    _slot_1_check = lcl_0
    lcl_0 = _slot_1_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_1_check
    else:
        lcl_0 = _slot_1_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_1 = lcl_0
        lcl_0 = (_slot_0, _slot_1)
        lcl_0 = prim__mk__ast("Stmts", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def lr_loop_Stmts(_slot_0, prim__state, prim__tokens):
    lr_Stmts_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_Stmts(lr_Stmts_reduce, prim__state, prim__tokens)
    lr_Stmts_try = lcl_0
    lcl_0 = lr_Stmts_try[0]
    lcl_0 = prim__not__eq(lcl_0, False)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_Stmts_try[1]
        lcl_0 = prim__to__result(lcl_0)
        lr_Stmts_reduce = lcl_0
        lcl_0 = lr_step_Stmts(lr_Stmts_reduce, prim__state, prim__tokens)
        lr_Stmts_try = lcl_0
        # recalculate condition
        lcl_0 = lr_Stmts_try[0]
        lcl_0 = prim__not__eq(lcl_0, False)
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_Stmts_reduce
def parse_CommaExps(prim__state, prim__tokens):
    lcl_0 = parse_Exp(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("CommaExps", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_CommaExps(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_DotId(prim__state, prim__tokens):
    lcl_0 = parse_Id(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("DotId", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_DotId(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_Exp(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("str"):
            lcl_2 = parse_Lit(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote open"):
            lcl_2 = parse_InExp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote let"):
            lcl_2 = parse_InExp(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote if"):
            lcl_2 = parse_If(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote fun"):
            lcl_2 = parse_Lam(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ("):
            lcl_2 = prim__mv__forward(prim__tokens)
            _slot_0 = lcl_2
            lcl_2 = parse_Exp(prim__state, prim__tokens)
            _slot_1_check = lcl_2
            lcl_2 = _slot_1_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_1_check
            else:
                lcl_3 = _slot_1_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_1 = lcl_3
                lcl_3 = prim__tk__id("quote )")
                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                _slot_2 = lcl_3
                lcl_3 = prim__is__null(_slot_2)
                if lcl_3:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, "quote ) not match")
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = prim__to__any(lcl_3)
                    lcl_3 = (False, lcl_3)
                else:
                    lcl_3 = (_slot_0, _slot_1, _slot_2)
                    lcl_3 = prim__mk__ast("AtomExp", lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (_slot_local__1,)
                    lcl_3 = prim__mk__ast("Exp", lcl_3)
                    _slot_local__2 = lcl_3
                    lcl_3 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                    lcl_3 = (True, lcl_3)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("number"):
            lcl_2 = parse_Lit(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("identifier"):
            lcl_2 = parse_Lit(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("AtomExp", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast("Exp", lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = lr_loop_Exp(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Exp lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Exp got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Id(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("identifier")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "identifier not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("Id", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_Ids(prim__state, prim__tokens):
    lcl_0 = parse_Id(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("Ids", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_Ids(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_If(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote if")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote if not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_Exp(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote then")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote then not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_Exp(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = prim__tk__id("quote else")
                    lcl_2 = prim__match__tk(prim__tokens, lcl_2)
                    _slot_4 = lcl_2
                    lcl_2 = prim__is__null(_slot_4)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, "quote else not match")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_Exp(prim__state, prim__tokens)
                        _slot_5_check = lcl_2
                        lcl_2 = _slot_5_check[0]
                        lcl_2 = prim__eq(lcl_2, False)
                        if lcl_2:
                            lcl_2 = _slot_5_check
                        else:
                            lcl_3 = _slot_5_check[1]
                            lcl_3 = prim__to__result(lcl_3)
                            _slot_5 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = prim__peekable(prim__tokens, 0)
                            if lcl_3:
                                # switch
                                lcl_5 = prim__peek(prim__tokens, 0)
                                lcl_5 = lcl_5.idint
                                if lcl_5 == prim__tk__id("quote end"):
                                    lcl_5 = prim__mv__forward(prim__tokens)
                                    _slot_6 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                    lcl_5 = prim__mk__ast("If", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_5 = prim__mk__ast("If", lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, "If got EOF")
                                lcl_5 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = prim__to__any(lcl_5)
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_InExp(prim__state, prim__tokens):
    lcl_0 = parse_Stmt(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = prim__tk__id("quote in")
        lcl_0 = prim__match__tk(prim__tokens, lcl_0)
        _slot_1 = lcl_0
        lcl_0 = prim__is__null(_slot_1)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, "quote in not match")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Exp(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = prim__eq(lcl_0, False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = prim__to__result(lcl_1)
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast("InExp", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
    return lcl_0
def parse_Lam(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote fun")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote fun not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = prim__tokens.offset
        _off_1 = lcl_0
        lcl_0 = prim__peekable(prim__tokens, 0)
        if lcl_0:
            # switch
            lcl_1 = prim__peek(prim__tokens, 0)
            lcl_1 = lcl_1.idint
            if lcl_1 == prim__tk__id("quote ->"):
                lcl_1 = prim__mv__forward(prim__tokens)
                _slot_1 = lcl_1
                lcl_1 = parse_Exp(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_2 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_2 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_4 = prim__peek(prim__tokens, 0)
                        lcl_4 = lcl_4.idint
                        if lcl_4 == prim__tk__id("quote end"):
                            lcl_4 = prim__mv__forward(prim__tokens)
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_4 = prim__mk__ast("Lam", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast("Lam", lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_2, "Lam got EOF")
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = prim__to__any(lcl_4)
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            elif lcl_1 == prim__tk__id("identifier"):
                lcl_1 = parse_Ids(prim__state, prim__tokens)
                _slot_1_check = lcl_1
                lcl_2 = _slot_1_check[0]
                lcl_1 = prim__eq(lcl_2, False)
                if lcl_1:
                    lcl_1 = _slot_1_check
                else:
                    lcl_1 = _slot_1_check[1]
                    lcl_1 = prim__to__result(lcl_1)
                    _slot_1 = lcl_1
                    lcl_1 = prim__tk__id("quote ->")
                    lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                    _slot_2 = lcl_1
                    lcl_1 = prim__is__null(_slot_2)
                    if lcl_1:
                        lcl_1 = prim__tokens.offset
                        lcl_1 = (lcl_1, "quote -> not match")
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = prim__to__any(lcl_1)
                        lcl_1 = (False, lcl_1)
                    else:
                        lcl_1 = parse_Exp(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = prim__eq(lcl_1, False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = prim__to__result(lcl_2)
                            _slot_3 = lcl_2
                            lcl_2 = prim__tokens.offset
                            _off_3 = lcl_2
                            lcl_2 = prim__peekable(prim__tokens, 0)
                            if lcl_2:
                                # switch
                                lcl_4 = prim__peek(prim__tokens, 0)
                                lcl_4 = lcl_4.idint
                                if lcl_4 == prim__tk__id("quote end"):
                                    lcl_4 = prim__mv__forward(prim__tokens)
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_4 = prim__mk__ast("Lam", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                    lcl_4 = prim__mk__ast("Lam", lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_3, "Lam got EOF")
                                lcl_4 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = prim__to__any(lcl_4)
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_1, "Lam lookahead failed")
                lcl_2 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_2)
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        else:
            lcl_0 = (_off_1, "Lam got EOF")
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = prim__to__any(lcl_0)
            lcl_0 = (False, lcl_0)
    return lcl_0
def parse_Let(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote let")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote let not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_Id(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote =")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote = not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = parse_Exp(prim__state, prim__tokens)
                _slot_3_check = lcl_1
                lcl_1 = _slot_3_check[0]
                lcl_1 = prim__eq(lcl_1, False)
                if lcl_1:
                    lcl_1 = _slot_3_check
                else:
                    lcl_2 = _slot_3_check[1]
                    lcl_2 = prim__to__result(lcl_2)
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                    lcl_2 = prim__mk__ast("Let", lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_Lit(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("str"):
            lcl_2 = parse_Str(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Lit", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("number"):
            lcl_2 = parse_Num(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Lit", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("identifier"):
            lcl_2 = parse_DotId(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_3 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_3, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Lit", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Lit lookahead failed")
            lcl_2 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_2)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Lit got EOF")
        lcl_2 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_2)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Mod(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote module")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote module not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_Id(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("quote =")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "quote = not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = prim__tk__id("quote {")
                lcl_1 = prim__match__tk(prim__tokens, lcl_1)
                _slot_3 = lcl_1
                lcl_1 = prim__is__null(_slot_3)
                if lcl_1:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, "quote { not match")
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = prim__to__any(lcl_2)
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                else:
                    lcl_2 = prim__tokens.offset
                    _off_3 = lcl_2
                    lcl_2 = prim__peekable(prim__tokens, 0)
                    if lcl_2:
                        # switch
                        lcl_3 = prim__peek(prim__tokens, 0)
                        lcl_3 = lcl_3.idint
                        if lcl_3 == prim__tk__id("quote }"):
                            lcl_3 = prim__mv__forward(prim__tokens)
                            _slot_4 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                            lcl_3 = prim__mk__ast("Mod", lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif lcl_3 == prim__tk__id("quote open"):
                            lcl_3 = parse_Stmts(prim__state, prim__tokens)
                            _slot_4_check = lcl_3
                            lcl_3 = _slot_4_check[0]
                            lcl_3 = prim__eq(lcl_3, False)
                            if lcl_3:
                                lcl_3 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__tk__id("quote }")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_5 = lcl_3
                                lcl_3 = prim__is__null(_slot_5)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, "quote } not match")
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = prim__to__any(lcl_3)
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_3 = prim__mk__ast("Mod", lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        elif lcl_3 == prim__tk__id("quote let"):
                            lcl_3 = parse_Stmts(prim__state, prim__tokens)
                            _slot_4_check = lcl_3
                            lcl_3 = _slot_4_check[0]
                            lcl_3 = prim__eq(lcl_3, False)
                            if lcl_3:
                                lcl_3 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = prim__to__result(lcl_3)
                                _slot_4 = lcl_3
                                lcl_3 = prim__tk__id("quote }")
                                lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                                _slot_5 = lcl_3
                                lcl_3 = prim__is__null(_slot_5)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, "quote } not match")
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = prim__to__any(lcl_3)
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_3 = prim__mk__ast("Mod", lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_3, "Mod lookahead failed")
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = prim__to__any(lcl_3)
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    else:
                        lcl_2 = (_off_3, "Mod got EOF")
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = prim__to__any(lcl_2)
                        lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
            lcl_0 = lcl_1
    return lcl_0
def parse_Num(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("number")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "number not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("Num", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
def parse_Open(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("quote open")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "quote open not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_DotId(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = (_slot_0, _slot_1)
            lcl_1 = prim__mk__ast("Open", lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_START(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("BOF")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "BOF not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = parse_Mod(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = prim__eq(lcl_0, False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = prim__to__result(lcl_1)
            _slot_1 = lcl_1
            lcl_1 = prim__tk__id("EOF")
            lcl_1 = prim__match__tk(prim__tokens, lcl_1)
            _slot_2 = lcl_1
            lcl_1 = prim__is__null(_slot_2)
            if lcl_1:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, "EOF not match")
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = prim__to__any(lcl_1)
                lcl_1 = (False, lcl_1)
            else:
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast("START", lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
    return lcl_0
def parse_Stmt(prim__state, prim__tokens):
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        # switch
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote open"):
            lcl_2 = parse_Open(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_2 = _slot_0_check[1]
                lcl_2 = prim__to__result(lcl_2)
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast("Stmt", lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote let"):
            lcl_2 = parse_Let(prim__state, prim__tokens)
            _slot_0_check = lcl_2
            lcl_2 = _slot_0_check[0]
            lcl_2 = prim__eq(lcl_2, False)
            if lcl_2:
                lcl_2 = _slot_0_check
            else:
                lcl_3 = _slot_0_check[1]
                lcl_3 = prim__to__result(lcl_3)
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Stmt", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        else:
            lcl_2 = (_off_0, "Stmt lookahead failed")
            lcl_3 = prim__cons(lcl_2, prim__nil)
            lcl_2 = prim__to__any(lcl_3)
            lcl_2 = (False, lcl_2)
            lcl_1 = lcl_2
        lcl_0 = lcl_1
    else:
        lcl_1 = (_off_0, "Stmt got EOF")
        lcl_1 = prim__cons(lcl_1, prim__nil)
        lcl_1 = prim__to__any(lcl_1)
        lcl_1 = (False, lcl_1)
        lcl_0 = lcl_1
    return lcl_0
def parse_Stmts(prim__state, prim__tokens):
    lcl_0 = parse_Stmt(prim__state, prim__tokens)
    _slot_0_check = lcl_0
    lcl_0 = _slot_0_check[0]
    lcl_0 = prim__eq(lcl_0, False)
    if lcl_0:
        lcl_0 = _slot_0_check
    else:
        lcl_0 = _slot_0_check[1]
        lcl_0 = prim__to__result(lcl_0)
        _slot_0 = lcl_0
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("Stmts", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = lr_loop_Stmts(_slot_local__1, prim__state, prim__tokens)
        lcl_0 = (True, lcl_0)
    return lcl_0
def parse_Str(prim__state, prim__tokens):
    lcl_0 = prim__tk__id("str")
    lcl_0 = prim__match__tk(prim__tokens, lcl_0)
    _slot_0 = lcl_0
    lcl_0 = prim__is__null(_slot_0)
    if lcl_0:
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0, "str not match")
        lcl_0 = prim__cons(lcl_0, prim__nil)
        lcl_0 = prim__to__any(lcl_0)
        lcl_0 = (False, lcl_0)
    else:
        lcl_0 = (_slot_0,)
        lcl_0 = prim__mk__ast("Str", lcl_0)
        _slot_local__1 = lcl_0
        lcl_0 = (True, _slot_local__1)
    return lcl_0
