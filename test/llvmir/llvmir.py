
from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
(_, run_lexer) = lexer(r(float='[-+]?[0-9]+\\.([eE][-+]?\\d+)'), r(int='\\d+'), r(globalIdent='@[-a-zA-Z$._][-a-zA-Z$._0-9]*'), r(localIdent='%[-a-zA-Z$._][-a-zA-Z$._0-9]*'), r(identifier='[-a-zA-Z$._][-a-zA-Z$._0-9]*'), r(str='"([^\\\\"]+|\\\\.)*?"'), r(whitespace='\\s+'), l['+'], l['='], l['('], l[')'], l[','], l['*'], l['['], l[']'], l['{'], l['}'], l['<'], l['>'], ignores=['whitespace'], reserved_map=ImmutableMap.from_dict({'+': 'quote +', '-': 'quote -', 'E': 'quote E', 'source_filename': 'quote source_filename', '=': 'quote =', 'opaque': 'quote opaque', 'type': 'quote type', 'void': 'quote void', '(': 'quote (', ')': 'quote )', '...': 'quote ...', ',': 'quote ,', 'align': 'quote align', 'dereferenceable': 'quote dereferenceable', 'dereferenceable_or_null': 'quote dereferenceable_or_null', 'i1': 'quote i1', 'i8': 'quote i8', 'i16': 'quote i16', 'i32': 'quote i32', 'i64': 'quote i64', 'f32': 'quote f32', 'f64': 'quote f64', '*': 'quote *', 'addrspace': 'quote addrspace', 'label': 'quote label', '[': 'quote [', 'x': 'quote x', ']': 'quote ]', '{': 'quote {', '}': 'quote }', 'true': 'quote true', 'false': 'quote false', 'null': 'quote null', 'none': 'quote none', '<': 'quote <', '>': 'quote >', 'c': 'quote c', 'zeroinitializer': 'quote zeroinitializer', 'undef': 'quote undef', 'blockaddress': 'quote blockaddress', 'exact': 'quote exact', 'nsw': 'quote nsw', 'nuw': 'quote nuw', 'add': 'quote add', 'fadd': 'quote fadd', 'sub': 'quote sub', 'fsub': 'quote fsub', 'mul': 'quote mul', 'fmul': 'quote fmul', 'udiv': 'quote udiv', 'sdiv': 'quote sdiv', 'urem': 'quote urem', 'srem': 'quote srem', 'frem': 'quote frem', 'shl': 'quote shl', 'lshr': 'quote lshr', 'ashr': 'quote ashr', 'and': 'quote and', 'or': 'quote or', 'xor': 'quote xor', 'extractvalue': 'quote extractvalue', 'insertvalue': 'quote insertvalue', 'getelementptr': 'quote getelementptr', 'inbounds': 'quote inbounds', 'inrange': 'quote inrange', 'bitcast': 'quote bitcast', 'to': 'quote to', 'declare': 'quote declare', 'define': 'quote define', 'store': 'quote store', 'volatile': 'quote volatile', 'ret': 'quote ret', 'br': 'quote br', 'switch': 'quote switch', 'alloca': 'quote alloca', 'load': 'quote load', 'icmp': 'quote icmp', 'fcmp': 'quote fcmp', 'phi': 'quote phi', 'select': 'quote select', 'tail': 'quote tail', 'notail': 'quote notail', 'musttail': 'quote musttail', 'call': 'quote call', 'eq': 'quote eq', 'ne': 'quote ne', 'sge': 'quote sge', 'sgt': 'quote sgt', 'sle': 'quote sle', 'slt': 'quote slt', 'uge': 'quote uge', 'ugt': 'quote ugt', 'ule': 'quote ule', 'ult': 'quote ult', 'oeq': 'quote oeq', 'oge': 'quote oge', 'ogt': 'quote ogt', 'ole': 'quote ole', 'olt': 'quote olt', 'one': 'quote one', 'ord': 'quote ord', 'ueq': 'quote ueq', 'une': 'quote une', 'uno': 'quote uno', 'appending': 'quote appending', 'available_externally': 'quote available_externally', 'common': 'quote common', 'internal': 'quote internal', 'linkonce': 'quote linkonce', 'linkonce_odr': 'quote linkonce_odr', 'private': 'quote private', 'weak': 'quote weak', 'weak_odr': 'quote weak_odr', 'extern_weak': 'quote extern_weak', 'external': 'quote external', 'dso_local': 'quote dso_local', 'dso_preemptable': 'quote dso_preemptable', 'default': 'quote default', 'hidden': 'quote hidden', 'protected': 'quote protected', 'local_unnamed_addr': 'quote local_unnamed_addr', 'unnamed_addr': 'quote unnamed_addr', 'externally_initialized': 'quote externally_initialized', 'constant': 'quote constant', 'global': 'quote global', 'allocsize': 'quote allocsize', 'alignstack': 'quote alignstack', 'comdat': 'quote comdat', '$': 'quote $', 'section': 'quote section', 'byval': 'quote byval', 'inalloca': 'quote inalloca', 'inreg': 'quote inreg', 'nest': 'quote nest', 'noalias': 'quote noalias', 'nocapture': 'quote nocapture', 'nonnull': 'quote nonnull', 'readnone': 'quote readnone', 'readonly': 'quote readonly', 'returned': 'quote returned', 'signext': 'quote signext', 'sret': 'quote sret', 'swifterror': 'quote swifterror', 'swiftself': 'quote swiftself', 'writeonly': 'quote writeonly', 'zeroext': 'quote zeroext', 'alwaysinline': 'quote alwaysinline', 'argmemonly': 'quote argmemonly', 'builtin': 'quote builtin', 'cold': 'quote cold', 'convergent': 'quote convergent', 'inaccessiblemem_or_argmemonly': 'quote inaccessiblemem_or_argmemonly', 'inaccessiblememonly': 'quote inaccessiblememonly', 'inlinehint': 'quote inlinehint', 'jumptable': 'quote jumptable', 'minsize': 'quote minsize', 'naked': 'quote naked', 'nobuiltin': 'quote nobuiltin', 'noduplicate': 'quote noduplicate', 'noimplicitfloat': 'quote noimplicitfloat', 'noinline': 'quote noinline', 'nonlazybind': 'quote nonlazybind', 'norecurse': 'quote norecurse', 'noredzone': 'quote noredzone', 'noreturn': 'quote noreturn', 'nounwind': 'quote nounwind', 'optnone': 'quote optnone', 'optsize': 'quote optsize', 'returns_twice': 'quote returns_twice', 'safestack': 'quote safestack', 'sanitize_address': 'quote sanitize_address', 'sanitize_hwaddress': 'quote sanitize_hwaddress', 'sanitize_memory': 'quote sanitize_memory', 'sanitize_thread': 'quote sanitize_thread', 'speculatable': 'quote speculatable', 'ssp': 'quote ssp', 'sspreq': 'quote sspreq', 'sspstrong': 'quote sspstrong', 'strictfp': 'quote strictfp', 'uwtable': 'quote uwtable'}), numbering={'BOF': 0, 'EOF': 1, 'quote +': 2, 'quote -': 3, 'quote E': 4, 'quote source_filename': 5, 'quote =': 6, 'quote opaque': 7, 'quote type': 8, 'quote void': 9, 'quote (': 10, 'quote )': 11, 'quote ...': 12, 'quote ,': 13, 'quote align': 14, 'quote dereferenceable': 15, 'quote dereferenceable_or_null': 16, 'quote i1': 17, 'quote i8': 18, 'quote i16': 19, 'quote i32': 20, 'quote i64': 21, 'quote f32': 22, 'quote f64': 23, 'quote *': 24, 'quote addrspace': 25, 'quote label': 26, 'quote [': 27, 'quote x': 28, 'quote ]': 29, 'quote {': 30, 'quote }': 31, 'quote true': 32, 'quote false': 33, 'quote null': 34, 'quote none': 35, 'quote <': 36, 'quote >': 37, 'quote c': 38, 'quote zeroinitializer': 39, 'quote undef': 40, 'quote blockaddress': 41, 'quote exact': 42, 'quote nsw': 43, 'quote nuw': 44, 'quote add': 45, 'quote fadd': 46, 'quote sub': 47, 'quote fsub': 48, 'quote mul': 49, 'quote fmul': 50, 'quote udiv': 51, 'quote sdiv': 52, 'quote urem': 53, 'quote srem': 54, 'quote frem': 55, 'quote shl': 56, 'quote lshr': 57, 'quote ashr': 58, 'quote and': 59, 'quote or': 60, 'quote xor': 61, 'quote extractvalue': 62, 'quote insertvalue': 63, 'quote getelementptr': 64, 'quote inbounds': 65, 'quote inrange': 66, 'quote bitcast': 67, 'quote to': 68, 'quote declare': 69, 'quote define': 70, 'quote store': 71, 'quote volatile': 72, 'quote ret': 73, 'quote br': 74, 'quote switch': 75, 'quote alloca': 76, 'quote load': 77, 'quote icmp': 78, 'quote fcmp': 79, 'quote phi': 80, 'quote select': 81, 'quote tail': 82, 'quote notail': 83, 'quote musttail': 84, 'quote call': 85, 'quote eq': 86, 'quote ne': 87, 'quote sge': 88, 'quote sgt': 89, 'quote sle': 90, 'quote slt': 91, 'quote uge': 92, 'quote ugt': 93, 'quote ule': 94, 'quote ult': 95, 'quote oeq': 96, 'quote oge': 97, 'quote ogt': 98, 'quote ole': 99, 'quote olt': 100, 'quote one': 101, 'quote ord': 102, 'quote ueq': 103, 'quote une': 104, 'quote uno': 105, 'quote appending': 106, 'quote available_externally': 107, 'quote common': 108, 'quote internal': 109, 'quote linkonce': 110, 'quote linkonce_odr': 111, 'quote private': 112, 'quote weak': 113, 'quote weak_odr': 114, 'quote extern_weak': 115, 'quote external': 116, 'quote dso_local': 117, 'quote dso_preemptable': 118, 'quote default': 119, 'quote hidden': 120, 'quote protected': 121, 'quote local_unnamed_addr': 122, 'quote unnamed_addr': 123, 'quote externally_initialized': 124, 'quote constant': 125, 'quote global': 126, 'quote allocsize': 127, 'quote alignstack': 128, 'quote comdat': 129, 'quote $': 130, 'quote section': 131, 'quote byval': 132, 'quote inalloca': 133, 'quote inreg': 134, 'quote nest': 135, 'quote noalias': 136, 'quote nocapture': 137, 'quote nonnull': 138, 'quote readnone': 139, 'quote readonly': 140, 'quote returned': 141, 'quote signext': 142, 'quote sret': 143, 'quote swifterror': 144, 'quote swiftself': 145, 'quote writeonly': 146, 'quote zeroext': 147, 'quote alwaysinline': 148, 'quote argmemonly': 149, 'quote builtin': 150, 'quote cold': 151, 'quote convergent': 152, 'quote inaccessiblemem_or_argmemonly': 153, 'quote inaccessiblememonly': 154, 'quote inlinehint': 155, 'quote jumptable': 156, 'quote minsize': 157, 'quote naked': 158, 'quote nobuiltin': 159, 'quote noduplicate': 160, 'quote noimplicitfloat': 161, 'quote noinline': 162, 'quote nonlazybind': 163, 'quote norecurse': 164, 'quote noredzone': 165, 'quote noreturn': 166, 'quote nounwind': 167, 'quote optnone': 168, 'quote optsize': 169, 'quote returns_twice': 170, 'quote safestack': 171, 'quote sanitize_address': 172, 'quote sanitize_hwaddress': 173, 'quote sanitize_memory': 174, 'quote sanitize_thread': 175, 'quote speculatable': 176, 'quote ssp': 177, 'quote sspreq': 178, 'quote sspstrong': 179, 'quote strictfp': 180, 'quote uwtable': 181, 'float': 182, 'int': 183, 'globalIdent': 184, 'localIdent': 185, 'identifier': 186, 'str': 187, 'whitespace': 188})



def mk_parser():
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_BasicBlockList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_BasicBlock(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('BasicBlockList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_BasicBlockList(_slot_0, prim__state, prim__tokens):
        lr_BasicBlockList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_BasicBlockList(lr_BasicBlockList_reduce, prim__state, prim__tokens)
        lr_BasicBlockList_try = lcl_0
        lcl_0 = lr_BasicBlockList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_BasicBlockList_try[1]
            lcl_0 = lcl_0
            lr_BasicBlockList_reduce = lcl_0
            lcl_0 = lr_step_BasicBlockList(lr_BasicBlockList_reduce, prim__state, prim__tokens)
            lr_BasicBlockList_try = lcl_0
            lcl_0 = lr_BasicBlockList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_BasicBlockList_reduce

    def lr_step_CaseList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_Case(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('CaseList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_CaseList(_slot_0, prim__state, prim__tokens):
        lr_CaseList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_CaseList(lr_CaseList_reduce, prim__state, prim__tokens)
        lr_CaseList_try = lcl_0
        lcl_0 = lr_CaseList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_CaseList_try[1]
            lcl_0 = lcl_0
            lr_CaseList_reduce = lcl_0
            lcl_0 = lr_step_CaseList(lr_CaseList_reduce, prim__state, prim__tokens)
            lr_CaseList_try = lcl_0
            lcl_0 = lr_CaseList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_CaseList_reduce

    def lr_step_GEPConstIndexList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_GEPConstIndex(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = lcl_1
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast('GEPConstIndexList', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def lr_loop_GEPConstIndexList(_slot_0, prim__state, prim__tokens):
        lr_GEPConstIndexList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_GEPConstIndexList(lr_GEPConstIndexList_reduce, prim__state, prim__tokens)
        lr_GEPConstIndexList_try = lcl_0
        lcl_0 = lr_GEPConstIndexList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_GEPConstIndexList_try[1]
            lcl_0 = lcl_0
            lr_GEPConstIndexList_reduce = lcl_0
            lcl_0 = lr_step_GEPConstIndexList(lr_GEPConstIndexList_reduce, prim__state, prim__tokens)
            lr_GEPConstIndexList_try = lcl_0
            lcl_0 = lr_GEPConstIndexList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_GEPConstIndexList_reduce

    def lr_step_IncList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_Inc(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('IncList', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_IncList(_slot_0, prim__state, prim__tokens):
        lr_IncList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_IncList(lr_IncList_reduce, prim__state, prim__tokens)
        lr_IncList_try = lcl_0
        lcl_0 = lr_IncList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_IncList_try[1]
            lcl_0 = lcl_0
            lr_IncList_reduce = lcl_0
            lcl_0 = lr_step_IncList(lr_IncList_reduce, prim__state, prim__tokens)
            lr_IncList_try = lcl_0
            lcl_0 = lr_IncList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_IncList_reduce

    def lr_step_IndexList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_IntLit(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = lcl_1
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast('IndexList', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def lr_loop_IndexList(_slot_0, prim__state, prim__tokens):
        lr_IndexList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_IndexList(lr_IndexList_reduce, prim__state, prim__tokens)
        lr_IndexList_try = lcl_0
        lcl_0 = lr_IndexList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_IndexList_try[1]
            lcl_0 = lcl_0
            lr_IndexList_reduce = lcl_0
            lcl_0 = lr_step_IndexList(lr_IndexList_reduce, prim__state, prim__tokens)
            lr_IndexList_try = lcl_0
            lcl_0 = lr_IndexList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_IndexList_reduce

    def lr_step_InstructionList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_Instruction(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('InstructionList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_InstructionList(_slot_0, prim__state, prim__tokens):
        lr_InstructionList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_InstructionList(lr_InstructionList_reduce, prim__state, prim__tokens)
        lr_InstructionList_try = lcl_0
        lcl_0 = lr_InstructionList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_InstructionList_try[1]
            lcl_0 = lcl_0
            lr_InstructionList_reduce = lcl_0
            lcl_0 = lr_step_InstructionList(lr_InstructionList_reduce, prim__state, prim__tokens)
            lr_InstructionList_try = lcl_0
            lcl_0 = lr_InstructionList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_InstructionList_reduce

    def lr_step_OverflowFlags(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 44):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_1 = lcl_2
                lcl_2 = (_slot_0, _slot_1)
                lcl_2 = prim__mk__ast('OverflowFlags', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 43):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_1 = lcl_2
                lcl_2 = (_slot_0, _slot_1)
                lcl_2 = prim__mk__ast('OverflowFlags', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'OverflowFlags lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'OverflowFlags got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_OverflowFlags(_slot_0, prim__state, prim__tokens):
        lr_OverflowFlags_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_OverflowFlags(lr_OverflowFlags_reduce, prim__state, prim__tokens)
        lr_OverflowFlags_try = lcl_0
        lcl_0 = lr_OverflowFlags_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_OverflowFlags_try[1]
            lcl_0 = lcl_0
            lr_OverflowFlags_reduce = lcl_0
            lcl_0 = lr_step_OverflowFlags(lr_OverflowFlags_reduce, prim__state, prim__tokens)
            lr_OverflowFlags_try = lcl_0
            lcl_0 = lr_OverflowFlags_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_OverflowFlags_reduce

    def lr_step_ParamAttrList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_ParamAttr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('ParamAttrList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_ParamAttrList(_slot_0, prim__state, prim__tokens):
        lr_ParamAttrList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_ParamAttrList(lr_ParamAttrList_reduce, prim__state, prim__tokens)
        lr_ParamAttrList_try = lcl_0
        lcl_0 = lr_ParamAttrList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_ParamAttrList_try[1]
            lcl_0 = lcl_0
            lr_ParamAttrList_reduce = lcl_0
            lcl_0 = lr_step_ParamAttrList(lr_ParamAttrList_reduce, prim__state, prim__tokens)
            lr_ParamAttrList_try = lcl_0
            lcl_0 = lr_ParamAttrList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_ParamAttrList_reduce

    def lr_step_ParamList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_Param(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('ParamList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_ParamList(_slot_0, prim__state, prim__tokens):
        lr_ParamList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_ParamList(lr_ParamList_reduce, prim__state, prim__tokens)
        lr_ParamList_try = lcl_0
        lcl_0 = lr_ParamList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_ParamList_try[1]
            lcl_0 = lcl_0
            lr_ParamList_reduce = lcl_0
            lcl_0 = lr_step_ParamList(lr_ParamList_reduce, prim__state, prim__tokens)
            lr_ParamList_try = lcl_0
            lcl_0 = lr_ParamList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_ParamList_reduce

    def lr_step_SepTypeValueList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('SepTypeValueList', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_SepTypeValueList(_slot_0, prim__state, prim__tokens):
        lr_SepTypeValueList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_SepTypeValueList(lr_SepTypeValueList_reduce, prim__state, prim__tokens)
        lr_SepTypeValueList_try = lcl_0
        lcl_0 = lr_SepTypeValueList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_SepTypeValueList_try[1]
            lcl_0 = lcl_0
            lr_SepTypeValueList_reduce = lcl_0
            lcl_0 = lr_step_SepTypeValueList(lr_SepTypeValueList_reduce, prim__state, prim__tokens)
            lr_SepTypeValueList_try = lcl_0
            lcl_0 = lr_SepTypeValueList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_SepTypeValueList_reduce

    def lr_step_TopLevelEntityList(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_TopLevelEntity(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('TopLevelEntityList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_TopLevelEntityList(_slot_0, prim__state, prim__tokens):
        lr_TopLevelEntityList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_TopLevelEntityList(lr_TopLevelEntityList_reduce, prim__state, prim__tokens)
        lr_TopLevelEntityList_try = lcl_0
        lcl_0 = lr_TopLevelEntityList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_TopLevelEntityList_try[1]
            lcl_0 = lcl_0
            lr_TopLevelEntityList_reduce = lcl_0
            lcl_0 = lr_step_TopLevelEntityList(lr_TopLevelEntityList_reduce, prim__state, prim__tokens)
            lr_TopLevelEntityList_try = lcl_0
            lcl_0 = lr_TopLevelEntityList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_TopLevelEntityList_reduce

    def lr_step_Type(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 25):
                lcl_2 = parse_AddrSpace(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    lcl_2 = 24
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_2 = lcl_2
                    lcl_2 = (_slot_2 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote * not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = (_slot_0, _slot_1, _slot_2)
                        lcl_2 = prim__mk__ast('PtrType', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (_slot_local__1,)
                        lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                        _slot_local__2 = lcl_2
                        lcl_2 = (_slot_local__2,)
                        lcl_2 = prim__mk__ast('Type', lcl_2)
                        _slot_local__3 = lcl_2
                        lcl_2 = (True, _slot_local__3)
                lcl_1 = lcl_2
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_1 = lcl_2
                lcl_2 = (_slot_0, _slot_1)
                lcl_2 = prim__mk__ast('PtrType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (_slot_local__1,)
                lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                _slot_local__2 = lcl_2
                lcl_2 = (_slot_local__2,)
                lcl_2 = prim__mk__ast('Type', lcl_2)
                _slot_local__3 = lcl_2
                lcl_2 = (True, _slot_local__3)
                lcl_1 = lcl_2
            elif (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_1 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 30):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 9):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 26):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 18):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 21):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 20):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 19):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 17):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 23):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 22):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 27):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 12):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 11):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast('FuncType', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (_slot_local__1,)
                        lcl_3 = prim__mk__ast('Type', lcl_3)
                        _slot_local__2 = lcl_3
                        lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 185):
                        lcl_3 = parse_Params(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('FuncType', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (_slot_local__1,)
                                lcl_3 = prim__mk__ast('Type', lcl_3)
                                _slot_local__2 = lcl_3
                                lcl_3 = (True, _slot_local__2)
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Type lookahead failed')
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_3
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                else:
                    lcl_2 = (_off_1, 'Type got EOF')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Type lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Type got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_Type(_slot_0, prim__state, prim__tokens):
        lr_Type_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_Type(lr_Type_reduce, prim__state, prim__tokens)
        lr_Type_try = lcl_0
        lcl_0 = lr_Type_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_Type_try[1]
            lcl_0 = lcl_0
            lr_Type_reduce = lcl_0
            lcl_0 = lr_step_Type(lr_Type_reduce, prim__state, prim__tokens)
            lr_Type_try = lcl_0
            lcl_0 = lr_Type_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_Type_reduce

    def lr_step_TypeConstList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = lcl_1
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast('TypeConstList', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def lr_loop_TypeConstList(_slot_0, prim__state, prim__tokens):
        lr_TypeConstList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_TypeConstList(lr_TypeConstList_reduce, prim__state, prim__tokens)
        lr_TypeConstList_try = lcl_0
        lcl_0 = lr_TypeConstList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_TypeConstList_try[1]
            lcl_0 = lcl_0
            lr_TypeConstList_reduce = lcl_0
            lcl_0 = lr_step_TypeConstList(lr_TypeConstList_reduce, prim__state, prim__tokens)
            lr_TypeConstList_try = lcl_0
            lcl_0 = lr_TypeConstList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_TypeConstList_reduce

    def lr_step_TypeList(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Type(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = lcl_1
                _slot_2 = lcl_1
                lcl_1 = (_slot_0, _slot_1, _slot_2)
                lcl_1 = prim__mk__ast('TypeList', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def lr_loop_TypeList(_slot_0, prim__state, prim__tokens):
        lr_TypeList_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_TypeList(lr_TypeList_reduce, prim__state, prim__tokens)
        lr_TypeList_try = lcl_0
        lcl_0 = lr_TypeList_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_TypeList_try[1]
            lcl_0 = lcl_0
            lr_TypeList_reduce = lcl_0
            lcl_0 = lr_step_TypeList(lr_TypeList_reduce, prim__state, prim__tokens)
            lr_TypeList_try = lcl_0
            lcl_0 = lr_TypeList_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_TypeList_reduce

    def parse_AddrSpace(prim__state, prim__tokens):
        lcl_0 = 25
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote addrspace not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 10
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote ( not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_IntLit(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = 11
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_3 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote ) not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_2 = prim__mk__ast('AddrSpace', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Alignment(prim__state, prim__tokens):
        lcl_0 = 14
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote align not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_IntLit(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = (_slot_0, _slot_1)
                lcl_1 = prim__mk__ast('Alignment', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_AllocaInst(prim__state, prim__tokens):
        lcl_0 = 76
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote alloca not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Type(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = prim__tokens.offset
                _off_1 = lcl_1
                lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_1:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 13):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_2 = lcl_3
                        lcl_3 = prim__tokens.offset
                        _off_2 = lcl_3
                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_3:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 30):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 9):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            elif (lcl_4 == 26):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_5 = _slot_3_check[0]
                                lcl_4 = (lcl_5 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 18):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            elif (lcl_4 == 21):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_5 = _slot_3_check[0]
                                lcl_4 = (lcl_5 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 20):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            elif (lcl_4 == 19):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_5 = _slot_3_check[0]
                                lcl_4 = (lcl_5 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 17):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            elif (lcl_4 == 23):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_5 = _slot_3_check[0]
                                lcl_4 = (lcl_5 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 22):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            elif (lcl_4 == 14):
                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_5 = _slot_3_check[0]
                                lcl_4 = (lcl_5 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_local__1)
                                    lcl_4 = prim__mk__ast('AllocaInst', lcl_4)
                                    _slot_local__2 = lcl_4
                                    lcl_4 = (True, _slot_local__2)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 27):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    lcl_4 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_3 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_5 = lcl_5.idint
                                        if (lcl_5 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_5 = _py_local_t
                                            _slot_4 = lcl_5
                                            lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_5
                                            lcl_5 = _slot_5_check[0]
                                            lcl_5 = (lcl_5 is False)
                                            if lcl_5:
                                                lcl_5 = _slot_5_check
                                            else:
                                                lcl_6 = _slot_5_check[1]
                                                lcl_6 = lcl_6
                                                _slot_5 = lcl_6
                                                lcl_6 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                                _slot_local__3 = lcl_6
                                                lcl_6 = (True, _slot_local__3)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        else:
                                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_5 = prim__mk__ast('AllocaInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                    else:
                                        lcl_4 = (_off_3, 'AllocaInst got EOF')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 185):
                                lcl_4 = parse_TypeValue(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    lcl_5 = (_slot_2, _slot_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = prim__tokens.offset
                                    _off_3 = lcl_5
                                    lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_5:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_4 = lcl_6
                                            lcl_6 = parse_Alignment(prim__state, prim__tokens)
                                            _slot_5_check = lcl_6
                                            lcl_6 = _slot_5_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_5_check
                                            else:
                                                lcl_7 = _slot_5_check[1]
                                                lcl_7 = lcl_7
                                                _slot_5 = lcl_7
                                                lcl_7 = (_slot_4, _slot_5)
                                                _slot_local__2 = lcl_7
                                                lcl_7 = (_slot_0, _slot_1, _slot_local__1, _slot_local__2)
                                                lcl_7 = prim__mk__ast('AllocaInst', lcl_7)
                                                _slot_local__3 = lcl_7
                                                lcl_7 = (True, _slot_local__3)
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                                            lcl_6 = prim__mk__ast('AllocaInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                    else:
                                        lcl_5 = (_off_3, 'AllocaInst got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'AllocaInst lookahead failed')
                                lcl_5 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_5
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                        else:
                            lcl_3 = (_off_2, 'AllocaInst got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('AllocaInst', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_off_1, 'AllocaInst got EOF')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_ArrayConst(prim__state, prim__tokens):
        lcl_0 = 27
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 30):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 18):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 20):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 17):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 22):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 29):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 185):
                    lcl_1 = parse_TypeConstList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ] not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('ArrayConst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'ArrayConst lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'ArrayConst got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_ArrayType(prim__state, prim__tokens):
        lcl_0 = 27
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_IntLit(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 28
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote x not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_4 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote ] not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                            lcl_2 = prim__mk__ast('ArrayType', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_BasicBlock(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 75):
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 71):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 81):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 73):
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 80):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 77):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 78):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 79):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 74):
                lcl_2 = parse_Terminator(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 76):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('BasicBlock', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_InstructionList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Terminator(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('BasicBlock', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 186):
                lcl_2 = parse_name(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 61):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 53):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 51):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 75):
                            lcl_4 = parse_Terminator(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = (_slot_0, _slot_1)
                                lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 47):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 71):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 54):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 56):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 81):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 52):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 73):
                            lcl_4 = parse_Terminator(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 80):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 60):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 49):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 57):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 77):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 63):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 78):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 64):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 48):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 55):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 50):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 79):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 46):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 62):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 74):
                            lcl_4 = parse_Terminator(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = (_slot_0, _slot_1)
                                lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 67):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 58):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 59):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 76):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 45):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_5 = _slot_1_check[0]
                            lcl_4 = (lcl_5 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_4 = _slot_1_check[1]
                                lcl_4 = lcl_4
                                _slot_1 = lcl_4
                                lcl_4 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('BasicBlock', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        elif (lcl_4 == 185):
                            lcl_4 = parse_InstructionList(prim__state, prim__tokens)
                            _slot_1_check = lcl_4
                            lcl_4 = _slot_1_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Terminator(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = (_slot_0, _slot_1, _slot_2)
                                    lcl_5 = prim__mk__ast('BasicBlock', lcl_5)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_off_1, 'BasicBlock lookahead failed')
                            lcl_5 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_5
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'BasicBlock got EOF')
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_3
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BasicBlock lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BasicBlock got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BasicBlockList(prim__state, prim__tokens):
        lcl_0 = parse_BasicBlock(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('BasicBlockList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_BasicBlockList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_BinInst(prim__state, prim__tokens):
        lcl_0 = parse_BinOp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = parse_BinOpQualifier(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_0 = _slot_1_check[1]
                lcl_0 = lcl_0
                _slot_1 = lcl_0
                lcl_0 = parse_TypeValue(prim__state, prim__tokens)
                _slot_2_check = lcl_0
                lcl_0 = _slot_2_check[0]
                lcl_0 = (lcl_0 is False)
                if lcl_0:
                    lcl_0 = _slot_2_check
                else:
                    lcl_0 = _slot_2_check[1]
                    lcl_0 = lcl_0
                    _slot_2 = lcl_0
                    lcl_0 = 13
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_0):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_0 = _py_local_tk
                    _slot_3 = lcl_0
                    lcl_0 = (_slot_3 is None)
                    if lcl_0:
                        lcl_0 = prim__tokens.offset
                        lcl_0 = (lcl_0, 'quote , not match')
                        lcl_0 = prim__cons(lcl_0, prim__nil)
                        lcl_0 = lcl_0
                        lcl_0 = (False, lcl_0)
                    else:
                        lcl_0 = parse_Value(prim__state, prim__tokens)
                        _slot_4_check = lcl_0
                        lcl_0 = _slot_4_check[0]
                        lcl_0 = (lcl_0 is False)
                        if lcl_0:
                            lcl_0 = _slot_4_check
                        else:
                            lcl_1 = _slot_4_check[1]
                            lcl_1 = lcl_1
                            _slot_4 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                            lcl_1 = prim__mk__ast('BinInst', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                            lcl_0 = lcl_1
        return lcl_0

    def parse_BinOp(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOp', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BinOp lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BinOp got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BinOpQualifier(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 44):
                lcl_2 = parse_OverflowFlags(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('BinOpQualifier', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 43):
                lcl_2 = parse_OverflowFlags(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('BinOpQualifier', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 42):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_3 = (_slot_0,)
                lcl_2 = prim__mk__ast('BinOpQualifier', lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BinOpQualifier lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BinOpQualifier got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BitCastExpr(prim__state, prim__tokens):
        lcl_0 = 67
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote bitcast not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 10
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote ( not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = 68
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_3 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote to not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_4_check = lcl_2
                        lcl_2 = _slot_4_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_4_check
                        else:
                            lcl_3 = _slot_4_check[1]
                            lcl_3 = lcl_3
                            _slot_4 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_5 = lcl_3
                            lcl_3 = (_slot_5 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_3 = prim__mk__ast('BitCastExpr', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_BitcastInst(prim__state, prim__tokens):
        lcl_0 = 67
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote bitcast not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 68
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote to not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_2 = prim__mk__ast('BitcastInst', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_BlockAddressConst(prim__state, prim__tokens):
        lcl_0 = 41
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote blockaddress not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 10
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote ( not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_GlobalName(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = 13
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_3 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote , not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_LocalName(prim__state, prim__tokens)
                        _slot_4_check = lcl_2
                        lcl_2 = _slot_4_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_4_check
                        else:
                            lcl_3 = _slot_4_check[1]
                            lcl_3 = lcl_3
                            _slot_4 = lcl_3
                            lcl_3 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_5 = lcl_3
                            lcl_3 = (_slot_5 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote ) not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_3 = prim__mk__ast('BlockAddressConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_BoolConst(prim__state, prim__tokens):
        lcl_0 = parse_BoolLit(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('BoolConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_BoolLit(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 32):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BoolLit', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 33):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('BoolLit', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BoolLit lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BoolLit got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BrTerm(prim__state, prim__tokens):
        lcl_0 = 74
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote br not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = prim__tokens.offset
                _off_1 = lcl_1
                lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_1:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 13):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_2 = lcl_3
                        lcl_3 = parse_LabelType(prim__state, prim__tokens)
                        _slot_3_check = lcl_3
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_4 = _slot_3_check[1]
                            lcl_4 = lcl_4
                            _slot_3 = lcl_4
                            lcl_4 = parse_LocalName(prim__state, prim__tokens)
                            _slot_4_check = lcl_4
                            lcl_4 = _slot_4_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_4_check
                            else:
                                lcl_4 = _slot_4_check[1]
                                lcl_4 = lcl_4
                                _slot_4 = lcl_4
                                lcl_4 = 13
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_5 = lcl_4
                                lcl_4 = (_slot_5 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote , not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = parse_LabelType(prim__state, prim__tokens)
                                    _slot_6_check = lcl_4
                                    lcl_4 = _slot_6_check[0]
                                    lcl_4 = (lcl_4 is False)
                                    if lcl_4:
                                        lcl_4 = _slot_6_check
                                    else:
                                        lcl_5 = _slot_6_check[1]
                                        lcl_5 = lcl_5
                                        _slot_6 = lcl_5
                                        lcl_5 = parse_LocalName(prim__state, prim__tokens)
                                        _slot_7_check = lcl_5
                                        lcl_5 = _slot_7_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_7_check
                                        else:
                                            lcl_5 = _slot_7_check[1]
                                            lcl_5 = lcl_5
                                            _slot_7 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                            lcl_5 = prim__mk__ast('BrTerm', lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 185):
                        lcl_3 = parse_LocalName(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_5 = (lcl_4 is False)
                        if lcl_5:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('BrTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'BrTerm lookahead failed')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_off_1, 'BrTerm got EOF')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Case(prim__state, prim__tokens):
        lcl_0 = parse_IntType(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = parse_IntConst(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_0 = _slot_1_check[1]
                lcl_0 = lcl_0
                _slot_1 = lcl_0
                lcl_0 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_0):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_0 = _py_local_tk
                _slot_2 = lcl_0
                lcl_0 = (_slot_2 is None)
                if lcl_0:
                    lcl_0 = prim__tokens.offset
                    lcl_0 = (lcl_0, 'quote , not match')
                    lcl_0 = prim__cons(lcl_0, prim__nil)
                    lcl_0 = lcl_0
                    lcl_0 = (False, lcl_0)
                else:
                    lcl_0 = parse_LabelType(prim__state, prim__tokens)
                    _slot_3_check = lcl_0
                    lcl_0 = _slot_3_check[0]
                    lcl_0 = (lcl_0 is False)
                    if lcl_0:
                        lcl_0 = _slot_3_check
                    else:
                        lcl_1 = _slot_3_check[1]
                        lcl_1 = lcl_1
                        _slot_3 = lcl_1
                        lcl_1 = parse_LocalName(prim__state, prim__tokens)
                        _slot_4_check = lcl_1
                        lcl_1 = _slot_4_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_4_check
                        else:
                            lcl_1 = _slot_4_check[1]
                            lcl_1 = lcl_1
                            _slot_4 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                            lcl_1 = prim__mk__ast('Case', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
        return lcl_0

    def parse_CaseList(prim__state, prim__tokens):
        lcl_0 = parse_Case(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('CaseList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_CaseList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Cases(prim__state, prim__tokens):
        lcl_0 = parse_CaseList(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('Cases', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_CharArrayConst(prim__state, prim__tokens):
        lcl_0 = 38
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote c not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_StrLit(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = (_slot_0, _slot_1)
                lcl_1 = prim__mk__ast('CharArrayConst', lcl_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_CmpInst(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 78):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = parse_IPred(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    lcl_3 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = lcl_3
                        _slot_2 = lcl_3
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_3_check = lcl_3
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = lcl_3
                            _slot_3 = lcl_3
                            lcl_3 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_4 = lcl_3
                            lcl_3 = (_slot_4 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote , not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_4 = _slot_5_check[1]
                                    lcl_4 = lcl_4
                                    _slot_5 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_4 = prim__mk__ast('CmpInst', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 79):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_3 = parse_FPred(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_4 = _slot_1_check[0]
                lcl_2 = (lcl_4 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_2 = _slot_2_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = lcl_2
                        _slot_2 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_2 = _slot_3_check[1]
                            lcl_2 = lcl_2
                            _slot_3 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_4 = lcl_2
                            lcl_2 = (_slot_4 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Value(prim__state, prim__tokens)
                                _slot_5_check = lcl_2
                                lcl_2 = _slot_5_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_5_check
                                else:
                                    lcl_3 = _slot_5_check[1]
                                    lcl_3 = lcl_3
                                    _slot_5 = lcl_3
                                    lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_3 = prim__mk__ast('CmpInst', lcl_3)
                                    _slot_local__1 = lcl_3
                                    lcl_3 = (True, _slot_local__1)
                                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'CmpInst lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'CmpInst got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Constant(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 30):
                lcl_2 = parse_StructConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 39):
                lcl_2 = parse_ZeroInitializerConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 61):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 40):
                lcl_2 = parse_UndefConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_BoolConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_NullConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 35):
                lcl_2 = parse_NoneConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 33):
                lcl_2 = parse_BoolConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 38):
                lcl_2 = parse_CharArrayConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 41):
                lcl_2 = parse_BlockAddressConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_ConstantExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 27):
                lcl_2 = parse_ArrayConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_StructConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 183):
                lcl_2 = parse_IntConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 184):
                lcl_2 = parse_GlobalName(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Constant', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 182):
                lcl_2 = parse_FloatConst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Constant', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Constant lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Constant got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ConstantExpr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_InsValExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_GEPExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_ExtValExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_BitCastExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('ConstantExpr', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_BinOp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_BinOpQualifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_ConstantOperand2(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('ConstantExpr', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'ConstantExpr lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ConstantExpr got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ConstantOperand2(prim__state, prim__tokens):
        lcl_0 = 10
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote ( not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = parse_Constant(prim__state, prim__tokens)
                        _slot_4_check = lcl_2
                        lcl_2 = _slot_4_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_4_check
                        else:
                            lcl_2 = _slot_4_check[1]
                            lcl_2 = lcl_2
                            _slot_4 = lcl_2
                            lcl_2 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_5 = lcl_2
                            lcl_2 = (_slot_5 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote ) not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_2 = prim__mk__ast('ConstantOperand2', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Dereferenceable(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 10
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'quote ( not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = parse_IntLit(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = 11
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_4):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_4 = _py_local_tk
                        _slot_3 = lcl_4
                        lcl_4 = (_slot_3 is None)
                        if lcl_4:
                            lcl_4 = prim__tokens.offset
                            lcl_4 = (lcl_4, 'quote ) not match')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                        else:
                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_4 = prim__mk__ast('Dereferenceable', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_3 = 10
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'quote ( not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = parse_IntLit(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_4 = _slot_2_check[1]
                        lcl_4 = lcl_4
                        _slot_2 = lcl_4
                        lcl_4 = 11
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_4):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_4 = _py_local_tk
                        _slot_3 = lcl_4
                        lcl_4 = (_slot_3 is None)
                        if lcl_4:
                            lcl_4 = prim__tokens.offset
                            lcl_4 = (lcl_4, 'quote ) not match')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                        else:
                            lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_4 = prim__mk__ast('Dereferenceable', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Dereferenceable lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Dereferenceable got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ExtValExpr(prim__state, prim__tokens):
        lcl_0 = 62
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote extractvalue not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 10
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote ( not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_2 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_3 = lcl_4
                            lcl_4 = parse_IndexList(prim__state, prim__tokens)
                            _slot_4_check = lcl_4
                            lcl_4 = _slot_4_check[0]
                            lcl_4 = (lcl_4 is False)
                            if lcl_4:
                                lcl_4 = _slot_4_check
                            else:
                                lcl_5 = _slot_4_check[1]
                                lcl_5 = lcl_5
                                _slot_4 = lcl_5
                                lcl_5 = (_slot_3, _slot_4)
                                _slot_local__1 = lcl_5
                                lcl_5 = 11
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_5):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_5 = _py_local_tk
                                _slot_5 = lcl_5
                                lcl_5 = (_slot_5 is None)
                                if lcl_5:
                                    lcl_6 = prim__tokens.offset
                                    lcl_6 = (lcl_6, 'quote ) not match')
                                    lcl_6 = prim__cons(lcl_6, prim__nil)
                                    lcl_6 = lcl_6
                                    lcl_6 = (False, lcl_6)
                                    lcl_5 = lcl_6
                                else:
                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_local__1, _slot_5)
                                    lcl_6 = prim__mk__ast('ExtValExpr', lcl_6)
                                    _slot_local__2 = lcl_6
                                    lcl_6 = (True, _slot_local__2)
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        elif (lcl_4 == 11):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_3 = lcl_4
                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                            lcl_4 = prim__mk__ast('ExtValExpr', lcl_5)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_off_2, 'ExtValExpr lookahead failed')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_2, 'ExtValExpr got EOF')
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_3
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_ExtValInst(prim__state, prim__tokens):
        lcl_0 = 62
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote extractvalue not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_IndexList(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                        lcl_2 = prim__mk__ast('ExtValInst', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_ExternLinkage(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 116):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ExternLinkage', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 115):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ExternLinkage', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'ExternLinkage lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ExternLinkage got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_FPred(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 105):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 104):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 95):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 94):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 93):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 92):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 103):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 102):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 101):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 100):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 99):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 98):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 97):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 96):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 33):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'FPred lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'FPred got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_FloatConst(prim__state, prim__tokens):
        lcl_0 = parse_FloatLit(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('FloatConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_FloatLit(prim__state, prim__tokens):
        lcl_0 = 182
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'float not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('FloatLit', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_FloatType(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 23):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FloatType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('FloatType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'FloatType lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'FloatType got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_FunctionBody(prim__state, prim__tokens):
        lcl_0 = 30
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote { not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 31):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 61):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 53):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 51):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 75):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 47):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 71):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 54):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 56):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 81):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 52):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 73):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 80):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 60):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 49):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 57):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 77):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 63):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 78):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 64):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 48):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 55):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 50):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 79):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 46):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 62):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 74):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 67):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 58):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 59):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 76):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 45):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 185):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 186):
                    lcl_1 = parse_BasicBlockList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionBody', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'FunctionBody lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'FunctionBody got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_FunctionDecl(prim__state, prim__tokens):
        lcl_0 = 69
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote declare not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 30):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 18):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 20):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 17):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 22):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 116):
                    lcl_1 = parse_ExternLinkage(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 115):
                    lcl_1 = parse_ExternLinkage(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_FunctionHeader(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = (_slot_0, _slot_1)
                        lcl_1 = prim__mk__ast('FunctionDecl', lcl_1)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 185):
                    lcl_1 = parse_FunctionHeader(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('FunctionDecl', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'FunctionDecl lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_2
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'FunctionDecl got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_FunctionDef(prim__state, prim__tokens):
        lcl_0 = 70
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote define not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_FunctionHeader(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = parse_FunctionBody(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = lcl_1
                    _slot_2 = lcl_1
                    lcl_1 = (_slot_0, _slot_1, _slot_2)
                    lcl_1 = prim__mk__ast('FunctionDef', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_FunctionHeader(prim__state, prim__tokens):
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = parse_GlobalName(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_0 = _slot_1_check[1]
                lcl_0 = lcl_0
                _slot_1 = lcl_0
                lcl_0 = 10
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_0):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_0 = _py_local_tk
                _slot_2 = lcl_0
                lcl_0 = (_slot_2 is None)
                if lcl_0:
                    lcl_0 = prim__tokens.offset
                    lcl_0 = (lcl_0, 'quote ( not match')
                    lcl_0 = prim__cons(lcl_0, prim__nil)
                    lcl_0 = lcl_0
                    lcl_0 = (False, lcl_0)
                else:
                    lcl_0 = parse_Params(prim__state, prim__tokens)
                    _slot_3_check = lcl_0
                    lcl_0 = _slot_3_check[0]
                    lcl_0 = (lcl_0 is False)
                    if lcl_0:
                        lcl_0 = _slot_3_check
                    else:
                        lcl_1 = _slot_3_check[1]
                        lcl_1 = lcl_1
                        _slot_3 = lcl_1
                        lcl_1 = 11
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_4 = lcl_1
                        lcl_1 = (_slot_4 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote ) not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = prim__tokens.offset
                            _off_2 = lcl_1
                            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_1:
                                lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_2 = lcl_2.idint
                                if (lcl_2 == 123):
                                    lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_2 = prim__mk__ast('FunctionHeader', lcl_2)
                                        _slot_local__1 = lcl_2
                                        lcl_2 = (True, _slot_local__1)
                                    lcl_1 = lcl_2
                                elif (lcl_2 == 122):
                                    lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_3 = prim__mk__ast('FunctionHeader', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                                else:
                                    lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                    lcl_3 = prim__mk__ast('FunctionHeader', lcl_2)
                                    _slot_local__1 = lcl_3
                                    lcl_2 = (True, _slot_local__1)
                                    lcl_1 = lcl_2
                            else:
                                lcl_1 = (_off_2, 'FunctionHeader got EOF')
                                lcl_2 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_2
                                lcl_1 = (False, lcl_1)
                        lcl_0 = lcl_1
        return lcl_0

    def parse_GEPConstIndex(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 66):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    lcl_3 = parse_IntLit(prim__state, prim__tokens)
                    _slot_2_check = lcl_3
                    lcl_3 = _slot_2_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_2_check
                    else:
                        lcl_3 = _slot_2_check[1]
                        lcl_3 = lcl_3
                        _slot_2 = lcl_3
                        lcl_3 = (_slot_0, _slot_1, _slot_2)
                        lcl_3 = prim__mk__ast('GEPConstIndex', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 18):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_IntLit(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('GEPConstIndex', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_IntLit(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('GEPConstIndex', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 20):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_IntLit(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('GEPConstIndex', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 19):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_IntLit(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('GEPConstIndex', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 17):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_IntLit(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('GEPConstIndex', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'GEPConstIndex lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'GEPConstIndex got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_GEPConstIndexList(prim__state, prim__tokens):
        lcl_0 = parse_GEPConstIndex(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('GEPConstIndexList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_GEPConstIndexList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_GEPExpr(prim__state, prim__tokens):
        lcl_0 = 64
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote getelementptr not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 65):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = 10
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_1):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_1 = _py_local_tk
                    _slot_2 = lcl_1
                    lcl_1 = (_slot_2 is None)
                    if lcl_1:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote ( not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                        lcl_1 = lcl_2
                    else:
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_3_check = lcl_2
                        lcl_2 = _slot_3_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_3_check
                        else:
                            lcl_3 = _slot_3_check[1]
                            lcl_3 = lcl_3
                            _slot_3 = lcl_3
                            lcl_3 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_4 = lcl_3
                            lcl_3 = (_slot_4 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote , not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = parse_TypeConstant(prim__state, prim__tokens)
                                _slot_5_check = lcl_3
                                lcl_3 = _slot_5_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_5_check
                                else:
                                    lcl_4 = _slot_5_check[1]
                                    lcl_4 = lcl_4
                                    _slot_5 = lcl_4
                                    lcl_4 = prim__tokens.offset
                                    _off_4 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 13):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_6 = lcl_6
                                            lcl_6 = parse_GEPConstIndexList(prim__state, prim__tokens)
                                            _slot_7_check = lcl_6
                                            lcl_6 = _slot_7_check[0]
                                            lcl_6 = (lcl_6 is False)
                                            if lcl_6:
                                                lcl_6 = _slot_7_check
                                            else:
                                                lcl_7 = _slot_7_check[1]
                                                lcl_7 = lcl_7
                                                _slot_7 = lcl_7
                                                lcl_7 = (_slot_6, _slot_7)
                                                _slot_local__1 = lcl_7
                                                lcl_7 = 11
                                                try:
                                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                    if (_py_local_tk.idint is lcl_7):
                                                        prim__tokens.offset += 1
                                                    else:
                                                        _py_local_tk = None
                                                except IndexError:
                                                    _py_local_tk = None
                                                lcl_7 = _py_local_tk
                                                _slot_8 = lcl_7
                                                lcl_7 = (_slot_8 is None)
                                                if lcl_7:
                                                    lcl_8 = prim__tokens.offset
                                                    lcl_8 = (lcl_8, 'quote ) not match')
                                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                                    lcl_8 = lcl_8
                                                    lcl_8 = (False, lcl_8)
                                                    lcl_7 = lcl_8
                                                else:
                                                    lcl_8 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1, _slot_8)
                                                    lcl_8 = prim__mk__ast('GEPExpr', lcl_8)
                                                    _slot_local__2 = lcl_8
                                                    lcl_8 = (True, _slot_local__2)
                                                    lcl_7 = lcl_8
                                                lcl_6 = lcl_7
                                            lcl_5 = lcl_6
                                        elif (lcl_6 == 11):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_6 = lcl_6
                                            lcl_7 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                            lcl_6 = prim__mk__ast('GEPExpr', lcl_7)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = (_off_4, 'GEPExpr lookahead failed')
                                            lcl_6 = prim__cons(lcl_6, prim__nil)
                                            lcl_6 = lcl_6
                                            lcl_6 = (False, lcl_6)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_off_4, 'GEPExpr got EOF')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 10):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_3 = _slot_2_check[0]
                    lcl_4 = (lcl_3 is False)
                    if lcl_4:
                        lcl_5 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = lcl_1
                        _slot_2 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_3 = lcl_1
                        lcl_1 = (_slot_3 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_5 = lcl_4
                                        lcl_4 = parse_GEPConstIndexList(prim__state, prim__tokens)
                                        _slot_6_check = lcl_4
                                        lcl_4 = _slot_6_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_6_check
                                        else:
                                            lcl_5 = _slot_6_check[1]
                                            lcl_5 = lcl_5
                                            _slot_6 = lcl_5
                                            lcl_5 = (_slot_5, _slot_6)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = 11
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_5):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_5 = _py_local_tk
                                            _slot_7 = lcl_5
                                            lcl_5 = (_slot_7 is None)
                                            if lcl_5:
                                                lcl_6 = prim__tokens.offset
                                                lcl_6 = (lcl_6, 'quote ) not match')
                                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                                lcl_6 = lcl_6
                                                lcl_6 = (False, lcl_6)
                                                lcl_5 = lcl_6
                                            else:
                                                lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1, _slot_7)
                                                lcl_6 = prim__mk__ast('GEPExpr', lcl_6)
                                                _slot_local__2 = lcl_6
                                                lcl_6 = (True, _slot_local__2)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    elif (lcl_4 == 11):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_5 = lcl_4
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                        lcl_4 = prim__mk__ast('GEPExpr', lcl_5)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_off_3, 'GEPExpr lookahead failed')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPExpr got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_5 = lcl_1
                    lcl_0 = lcl_5
                else:
                    lcl_1 = (_off_1, 'GEPExpr lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_3 = lcl_2
                    lcl_1 = (False, lcl_3)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'GEPExpr got EOF')
                lcl_1 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_1
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_GEPInst(prim__state, prim__tokens):
        lcl_0 = 64
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote getelementptr not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 30):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 65):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_3 = _slot_2_check[0]
                    lcl_1 = (lcl_3 is False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = lcl_1
                        _slot_2 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_3 = lcl_1
                        lcl_1 = (_slot_3 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_5 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_6_check = lcl_4
                                        lcl_4 = _slot_6_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_6_check
                                        else:
                                            lcl_5 = _slot_6_check[1]
                                            lcl_5 = lcl_5
                                            _slot_6 = lcl_5
                                            lcl_5 = (_slot_5, _slot_6)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 18):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 20):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 17):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 22):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('GEPInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'GEPInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 185):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_SepTypeValueList(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('GEPInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GEPInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'GEPInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'GEPInst lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_3 = lcl_2
                    lcl_4 = (False, lcl_3)
                    lcl_0 = lcl_4
            else:
                lcl_0 = (_off_1, 'GEPInst got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_Global(prim__state, prim__tokens):
        lcl_0 = parse_GlobalName(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = 6
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_0 = prim__tokens.offset
                lcl_0 = (lcl_0, 'quote = not match')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
            else:
                lcl_0 = prim__tokens.offset
                _off_1 = lcl_0
                lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_0:
                    lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_1 = lcl_1.idint
                    if (lcl_1 == 123):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('Global', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
                    elif (lcl_1 == 122):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('Global', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        lcl_0 = lcl_1
                    elif (lcl_1 == 126):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_2 = _slot_2_check[0]
                        lcl_1 = (lcl_2 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('Global', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
                    elif (lcl_1 == 116):
                        lcl_1 = parse_GlobalDecl(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('Global', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        lcl_0 = lcl_1
                    elif (lcl_1 == 115):
                        lcl_1 = parse_GlobalDecl(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_2 = _slot_2_check[0]
                        lcl_1 = (lcl_2 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('Global', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
                    elif (lcl_1 == 118):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('Global', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        lcl_0 = lcl_1
                    elif (lcl_1 == 117):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_2 = _slot_2_check[0]
                        lcl_1 = (lcl_2 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('Global', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                        lcl_0 = lcl_1
                    elif (lcl_1 == 125):
                        lcl_1 = parse_GlobalDef(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('Global', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        lcl_0 = lcl_1
                    else:
                        lcl_1 = (_off_1, 'Global lookahead failed')
                        lcl_2 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = lcl_2
                        lcl_1 = (False, lcl_1)
                        lcl_0 = lcl_1
                else:
                    lcl_0 = (_off_1, 'Global got EOF')
                    lcl_0 = prim__cons(lcl_0, prim__nil)
                    lcl_0 = lcl_0
                    lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_GlobalDecl(prim__state, prim__tokens):
        lcl_0 = parse_ExternLinkage(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_2 = lcl_2.idint
                if (lcl_2 == 123):
                    lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Immutable(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('GlobalDecl', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                elif (lcl_2 == 122):
                    lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_Immutable(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('GlobalDecl', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 126):
                    lcl_2 = parse_Immutable(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('GlobalDecl', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                elif (lcl_2 == 118):
                    lcl_2 = parse_PreemptionSpecifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = prim__tokens.offset
                        _off_1 = lcl_3
                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_3:
                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_5 = lcl_5.idint
                            if (lcl_5 == 123):
                                lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = parse_Type(prim__state, prim__tokens)
                                        _slot_4_check = lcl_5
                                        lcl_5 = _slot_4_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_4_check
                                        else:
                                            lcl_5 = _slot_4_check[1]
                                            lcl_5 = lcl_5
                                            _slot_4 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_5 = prim__mk__ast('GlobalDecl', lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            elif (lcl_5 == 122):
                                lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Immutable(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = parse_Type(prim__state, prim__tokens)
                                        _slot_4_check = lcl_6
                                        lcl_6 = _slot_4_check[0]
                                        lcl_6 = (lcl_6 is False)
                                        if lcl_6:
                                            lcl_6 = _slot_4_check
                                        else:
                                            lcl_6 = _slot_4_check[1]
                                            lcl_6 = lcl_6
                                            _slot_4 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_6 = prim__mk__ast('GlobalDecl', lcl_6)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            elif (lcl_5 == 126):
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_6 = _slot_2_check[0]
                                lcl_5 = (lcl_6 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GlobalDecl', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            elif (lcl_5 == 125):
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_6 = prim__mk__ast('GlobalDecl', lcl_6)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (True, _slot_local__1)
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_off_1, 'GlobalDecl lookahead failed')
                                lcl_6 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_6
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_off_1, 'GlobalDecl got EOF')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 117):
                    lcl_2 = parse_PreemptionSpecifier(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_4 = (lcl_3 is False)
                    if lcl_4:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = prim__tokens.offset
                        _off_1 = lcl_3
                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_3:
                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_5 = lcl_5.idint
                            if (lcl_5 == 123):
                                lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = parse_Type(prim__state, prim__tokens)
                                        _slot_4_check = lcl_5
                                        lcl_5 = _slot_4_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_4_check
                                        else:
                                            lcl_5 = _slot_4_check[1]
                                            lcl_5 = lcl_5
                                            _slot_4 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_5 = prim__mk__ast('GlobalDecl', lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            elif (lcl_5 == 122):
                                lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Immutable(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = parse_Type(prim__state, prim__tokens)
                                        _slot_4_check = lcl_6
                                        lcl_6 = _slot_4_check[0]
                                        lcl_6 = (lcl_6 is False)
                                        if lcl_6:
                                            lcl_6 = _slot_4_check
                                        else:
                                            lcl_6 = _slot_4_check[1]
                                            lcl_6 = lcl_6
                                            _slot_4 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_6 = prim__mk__ast('GlobalDecl', lcl_6)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            elif (lcl_5 == 126):
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_6 = _slot_2_check[0]
                                lcl_5 = (lcl_6 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GlobalDecl', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                lcl_4 = lcl_5
                            elif (lcl_5 == 125):
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_6 = prim__mk__ast('GlobalDecl', lcl_6)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (True, _slot_local__1)
                                    lcl_5 = lcl_6
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_off_1, 'GlobalDecl lookahead failed')
                                lcl_6 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_6
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_off_1, 'GlobalDecl got EOF')
                            lcl_4 = prim__cons(lcl_4, prim__nil)
                            lcl_4 = lcl_4
                            lcl_4 = (False, lcl_4)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 125):
                    lcl_2 = parse_Immutable(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_4 = (lcl_3 is False)
                    if lcl_4:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_Type(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('GlobalDecl', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_off_0, 'GlobalDecl lookahead failed')
                    lcl_3 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_3
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_0, 'GlobalDecl got EOF')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_GlobalDef(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 123):
                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Immutable(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Type(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = parse_Constant(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('GlobalDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 122):
                lcl_2 = parse_UnnamedAddr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Immutable(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_Type(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = parse_Constant(prim__state, prim__tokens)
                            _slot_3_check = lcl_3
                            lcl_3 = _slot_3_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('GlobalDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 126):
                lcl_2 = parse_Immutable(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Constant(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_0, _slot_1, _slot_2)
                            lcl_2 = prim__mk__ast('GlobalDef', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 118):
                lcl_2 = parse_PreemptionSpecifier(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 123):
                            lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = parse_Constant(prim__state, prim__tokens)
                                        _slot_4_check = lcl_5
                                        lcl_5 = _slot_4_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_4_check
                                        else:
                                            lcl_5 = _slot_4_check[1]
                                            lcl_5 = lcl_5
                                            _slot_4 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_5 = prim__mk__ast('GlobalDef', lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        elif (lcl_5 == 122):
                            lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_6 = _slot_1_check[1]
                                lcl_6 = lcl_6
                                _slot_1 = lcl_6
                                lcl_6 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_6
                                lcl_6 = _slot_2_check[0]
                                lcl_6 = (lcl_6 is False)
                                if lcl_6:
                                    lcl_6 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = parse_Constant(prim__state, prim__tokens)
                                        _slot_4_check = lcl_6
                                        lcl_6 = _slot_4_check[0]
                                        lcl_6 = (lcl_6 is False)
                                        if lcl_6:
                                            lcl_6 = _slot_4_check
                                        else:
                                            lcl_6 = _slot_4_check[1]
                                            lcl_6 = lcl_6
                                            _slot_4 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_6 = prim__mk__ast('GlobalDef', lcl_6)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        elif (lcl_5 == 126):
                            lcl_5 = parse_Immutable(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_6 = _slot_1_check[0]
                            lcl_5 = (lcl_6 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Type(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Constant(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GlobalDef', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        elif (lcl_5 == 125):
                            lcl_5 = parse_Immutable(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_6 = _slot_1_check[1]
                                lcl_6 = lcl_6
                                _slot_1 = lcl_6
                                lcl_6 = parse_Type(prim__state, prim__tokens)
                                _slot_2_check = lcl_6
                                lcl_6 = _slot_2_check[0]
                                lcl_6 = (lcl_6 is False)
                                if lcl_6:
                                    lcl_6 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Constant(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_6 = prim__mk__ast('GlobalDef', lcl_6)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_off_1, 'GlobalDef lookahead failed')
                            lcl_6 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = lcl_6
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'GlobalDef got EOF')
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_4
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 117):
                lcl_2 = parse_PreemptionSpecifier(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_4 = (lcl_3 is False)
                if lcl_4:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 123):
                            lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = parse_Constant(prim__state, prim__tokens)
                                        _slot_4_check = lcl_5
                                        lcl_5 = _slot_4_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_4_check
                                        else:
                                            lcl_5 = _slot_4_check[1]
                                            lcl_5 = lcl_5
                                            _slot_4 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_5 = prim__mk__ast('GlobalDef', lcl_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        elif (lcl_5 == 122):
                            lcl_5 = parse_UnnamedAddr(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_6 = _slot_1_check[1]
                                lcl_6 = lcl_6
                                _slot_1 = lcl_6
                                lcl_6 = parse_Immutable(prim__state, prim__tokens)
                                _slot_2_check = lcl_6
                                lcl_6 = _slot_2_check[0]
                                lcl_6 = (lcl_6 is False)
                                if lcl_6:
                                    lcl_6 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Type(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = parse_Constant(prim__state, prim__tokens)
                                        _slot_4_check = lcl_6
                                        lcl_6 = _slot_4_check[0]
                                        lcl_6 = (lcl_6 is False)
                                        if lcl_6:
                                            lcl_6 = _slot_4_check
                                        else:
                                            lcl_6 = _slot_4_check[1]
                                            lcl_6 = lcl_6
                                            _slot_4 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                            lcl_6 = prim__mk__ast('GlobalDef', lcl_6)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        elif (lcl_5 == 126):
                            lcl_5 = parse_Immutable(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_6 = _slot_1_check[0]
                            lcl_5 = (lcl_6 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_5 = _slot_1_check[1]
                                lcl_5 = lcl_5
                                _slot_1 = lcl_5
                                lcl_5 = parse_Type(prim__state, prim__tokens)
                                _slot_2_check = lcl_5
                                lcl_5 = _slot_2_check[0]
                                lcl_5 = (lcl_5 is False)
                                if lcl_5:
                                    lcl_5 = _slot_2_check
                                else:
                                    lcl_5 = _slot_2_check[1]
                                    lcl_5 = lcl_5
                                    _slot_2 = lcl_5
                                    lcl_5 = parse_Constant(prim__state, prim__tokens)
                                    _slot_3_check = lcl_5
                                    lcl_5 = _slot_3_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_3_check
                                    else:
                                        lcl_5 = _slot_3_check[1]
                                        lcl_5 = lcl_5
                                        _slot_3 = lcl_5
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('GlobalDef', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        elif (lcl_5 == 125):
                            lcl_5 = parse_Immutable(prim__state, prim__tokens)
                            _slot_1_check = lcl_5
                            lcl_5 = _slot_1_check[0]
                            lcl_5 = (lcl_5 is False)
                            if lcl_5:
                                lcl_5 = _slot_1_check
                            else:
                                lcl_6 = _slot_1_check[1]
                                lcl_6 = lcl_6
                                _slot_1 = lcl_6
                                lcl_6 = parse_Type(prim__state, prim__tokens)
                                _slot_2_check = lcl_6
                                lcl_6 = _slot_2_check[0]
                                lcl_6 = (lcl_6 is False)
                                if lcl_6:
                                    lcl_6 = _slot_2_check
                                else:
                                    lcl_6 = _slot_2_check[1]
                                    lcl_6 = lcl_6
                                    _slot_2 = lcl_6
                                    lcl_6 = parse_Constant(prim__state, prim__tokens)
                                    _slot_3_check = lcl_6
                                    lcl_6 = _slot_3_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_3_check
                                    else:
                                        lcl_6 = _slot_3_check[1]
                                        lcl_6 = lcl_6
                                        _slot_3 = lcl_6
                                        lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_6 = prim__mk__ast('GlobalDef', lcl_6)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_off_1, 'GlobalDef lookahead failed')
                            lcl_6 = prim__cons(lcl_5, prim__nil)
                            lcl_5 = lcl_6
                            lcl_5 = (False, lcl_5)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'GlobalDef got EOF')
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_4
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 125):
                lcl_2 = parse_Immutable(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_4 = (lcl_3 is False)
                if lcl_4:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_3
                    lcl_3 = _slot_1_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_1_check
                    else:
                        lcl_3 = _slot_1_check[1]
                        lcl_3 = lcl_3
                        _slot_1 = lcl_3
                        lcl_3 = parse_Constant(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('GlobalDef', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'GlobalDef lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'GlobalDef got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_GlobalName(prim__state, prim__tokens):
        lcl_0 = 184
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'globalIdent not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('GlobalName', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_IPred(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 95):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 94):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 93):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 92):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 91):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 90):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 89):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 88):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 87):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 86):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IPred', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'IPred lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'IPred got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Immutable(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 126):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Immutable', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 125):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Immutable', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Immutable lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Immutable got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Inc(prim__state, prim__tokens):
        lcl_0 = 27
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Value(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_LocalName(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = 29
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_4 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote ] not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                            lcl_2 = prim__mk__ast('Inc', lcl_2)
                            _slot_local__1 = lcl_2
                            lcl_2 = (True, _slot_local__1)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_IncList(prim__state, prim__tokens):
        lcl_0 = parse_Inc(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('IncList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_IncList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_IndexList(prim__state, prim__tokens):
        lcl_0 = parse_IntLit(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('IndexList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_IndexList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_InsValExpr(prim__state, prim__tokens):
        lcl_0 = 63
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote insertvalue not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 10
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote ( not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_TypeConstant(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = 13
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_3 = lcl_2
                    lcl_2 = (_slot_3 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote , not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = parse_TypeConstant(prim__state, prim__tokens)
                        _slot_4_check = lcl_2
                        lcl_2 = _slot_4_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_4_check
                        else:
                            lcl_3 = _slot_4_check[1]
                            lcl_3 = lcl_3
                            _slot_4 = lcl_3
                            lcl_3 = prim__tokens.offset
                            _off_3 = lcl_3
                            lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_3:
                                lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_5 = lcl_5.idint
                                if (lcl_5 == 13):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_5 = _py_local_t
                                    _slot_5 = lcl_5
                                    lcl_5 = parse_IndexList(prim__state, prim__tokens)
                                    _slot_6_check = lcl_5
                                    lcl_5 = _slot_6_check[0]
                                    lcl_5 = (lcl_5 is False)
                                    if lcl_5:
                                        lcl_5 = _slot_6_check
                                    else:
                                        lcl_6 = _slot_6_check[1]
                                        lcl_6 = lcl_6
                                        _slot_6 = lcl_6
                                        lcl_6 = (_slot_5, _slot_6)
                                        _slot_local__1 = lcl_6
                                        lcl_6 = 11
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_6):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_6 = _py_local_tk
                                        _slot_7 = lcl_6
                                        lcl_6 = (_slot_7 is None)
                                        if lcl_6:
                                            lcl_7 = prim__tokens.offset
                                            lcl_7 = (lcl_7, 'quote ) not match')
                                            lcl_7 = prim__cons(lcl_7, prim__nil)
                                            lcl_7 = lcl_7
                                            lcl_7 = (False, lcl_7)
                                            lcl_6 = lcl_7
                                        else:
                                            lcl_7 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1, _slot_7)
                                            lcl_7 = prim__mk__ast('InsValExpr', lcl_7)
                                            _slot_local__2 = lcl_7
                                            lcl_7 = (True, _slot_local__2)
                                            lcl_6 = lcl_7
                                        lcl_5 = lcl_6
                                    lcl_4 = lcl_5
                                elif (lcl_5 == 11):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_5 = _py_local_t
                                    _slot_5 = lcl_5
                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                    lcl_5 = prim__mk__ast('InsValExpr', lcl_6)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                else:
                                    lcl_5 = (_off_3, 'InsValExpr lookahead failed')
                                    lcl_5 = prim__cons(lcl_5, prim__nil)
                                    lcl_5 = lcl_5
                                    lcl_5 = (False, lcl_5)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_3, 'InsValExpr got EOF')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_InsValInst(prim__state, prim__tokens):
        lcl_0 = 63
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote insertvalue not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_4 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_IndexList(prim__state, prim__tokens)
                            _slot_5_check = lcl_2
                            lcl_2 = _slot_5_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_5_check
                            else:
                                lcl_3 = _slot_5_check[1]
                                lcl_3 = lcl_3
                                _slot_5 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_3 = prim__mk__ast('InsValInst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Instruction(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 71):
                lcl_2 = parse_StoreInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 81):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 80):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 77):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 78):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 79):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 76):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Instruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Instruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_LocalName(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = 6
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_1 = lcl_2
                    lcl_2 = (_slot_1 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote = not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        lcl_2 = (_slot_0, _slot_1)
                        _slot_local__1 = lcl_2
                        lcl_2 = parse_ValueInstruction(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = (_slot_local__1, _slot_2)
                            lcl_2 = prim__mk__ast('Instruction', lcl_2)
                            _slot_local__2 = lcl_2
                            lcl_2 = (True, _slot_local__2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Instruction lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Instruction got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_InstructionList(prim__state, prim__tokens):
        lcl_0 = parse_Instruction(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('InstructionList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_InstructionList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_IntConst(prim__state, prim__tokens):
        lcl_0 = parse_IntLit(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('IntConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_IntLit(prim__state, prim__tokens):
        lcl_0 = 183
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'int not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('IntLit', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_IntType(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IntType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IntType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 20):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IntType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IntType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('IntType', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'IntType lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'IntType got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_LabelType(prim__state, prim__tokens):
        lcl_0 = 26
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote label not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('LabelType', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_LoadInst(prim__state, prim__tokens):
        lcl_0 = 77
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote load not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 30):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 72):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_3 = _slot_2_check[0]
                    lcl_1 = (lcl_3 is False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = lcl_1
                        _slot_2 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_3 = lcl_1
                        lcl_1 = (_slot_3 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_4_check = lcl_1
                            lcl_1 = _slot_4_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_5 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_6_check = lcl_4
                                        lcl_4 = _slot_6_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_6_check
                                        else:
                                            lcl_5 = _slot_6_check[1]
                                            lcl_5 = lcl_5
                                            _slot_6 = lcl_5
                                            lcl_5 = (_slot_5, _slot_6)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 18):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 20):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 17):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 22):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote , not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_4 = lcl_4.idint
                                    if (lcl_4 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_4 = _py_local_t
                                        _slot_4 = lcl_4
                                        lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            lcl_5 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_5
                                            lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                            _slot_local__2 = lcl_5
                                            lcl_5 = (True, _slot_local__2)
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_4 = prim__mk__ast('LoadInst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                                else:
                                    lcl_3 = (_off_3, 'LoadInst got EOF')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                    lcl_2 = lcl_3
                                lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 185):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 13):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                        _slot_5_check = lcl_5
                                        lcl_5 = _slot_5_check[0]
                                        lcl_5 = (lcl_5 is False)
                                        if lcl_5:
                                            lcl_5 = _slot_5_check
                                        else:
                                            lcl_6 = _slot_5_check[1]
                                            lcl_6 = lcl_6
                                            _slot_5 = lcl_6
                                            lcl_6 = (_slot_4, _slot_5)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_local__1)
                                            lcl_6 = prim__mk__ast('LoadInst', lcl_6)
                                            _slot_local__2 = lcl_6
                                            lcl_6 = (True, _slot_local__2)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                        lcl_5 = prim__mk__ast('LoadInst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'LoadInst got EOF')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'LoadInst lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_3 = lcl_2
                    lcl_4 = (False, lcl_3)
                    lcl_0 = lcl_4
            else:
                lcl_0 = (_off_1, 'LoadInst got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_LocalName(prim__state, prim__tokens):
        lcl_0 = 185
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'localIdent not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('LocalName', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_NamedType(prim__state, prim__tokens):
        lcl_0 = parse_LocalName(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('NamedType', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_NoneConst(prim__state, prim__tokens):
        lcl_0 = 35
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote none not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('NoneConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_NullConst(prim__state, prim__tokens):
        lcl_0 = 34
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote null not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('NullConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_OpaqueType(prim__state, prim__tokens):
        lcl_0 = 7
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote opaque not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('OpaqueType', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_OverflowFlags(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 44):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('OverflowFlags', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = lr_loop_OverflowFlags(_slot_local__1, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 43):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('OverflowFlags', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = lr_loop_OverflowFlags(_slot_local__1, prim__state, prim__tokens)
                lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'OverflowFlags lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'OverflowFlags got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Param(prim__state, prim__tokens):
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_2 = lcl_2.idint
                if (lcl_2 == 187):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 147):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 146):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 145):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 144):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 143):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 142):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 141):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 140):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 139):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 138):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 137):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 136):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 135):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 134):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 133):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 16):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 15):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 132):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 14):
                    lcl_2 = parse_ParamAttrs(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = prim__tokens.offset
                        _off_1 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 185):
                                lcl_4 = parse_LocalName(prim__state, prim__tokens)
                                _slot_2_check = lcl_4
                                lcl_4 = _slot_2_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_2_check
                                else:
                                    lcl_4 = _slot_2_check[1]
                                    lcl_4 = lcl_4
                                    _slot_2 = lcl_4
                                    lcl_4 = (_slot_0, _slot_1, _slot_2)
                                    lcl_4 = prim__mk__ast('Param', lcl_4)
                                    _slot_local__1 = lcl_4
                                    lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1)
                                lcl_4 = prim__mk__ast('Param', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_1, 'Param got EOF')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    lcl_1 = lcl_2
                elif (lcl_2 == 185):
                    lcl_2 = parse_LocalName(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_3 = _slot_1_check[0]
                    lcl_2 = (lcl_3 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = (_slot_0, _slot_1)
                        lcl_2 = prim__mk__ast('Param', lcl_2)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Param', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_0, 'Param got EOF')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_ParamAttr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 187):
                lcl_2 = parse_StrLit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 147):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 146):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 145):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 144):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 143):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 142):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 141):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 140):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 139):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 138):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 137):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 136):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 135):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 134):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 133):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                lcl_2 = parse_Dereferenceable(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ParamAttr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 15):
                lcl_2 = parse_Dereferenceable(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 132):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('ParamAttr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 14):
                lcl_2 = parse_Alignment(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ParamAttr', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'ParamAttr lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ParamAttr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ParamAttrList(prim__state, prim__tokens):
        lcl_0 = parse_ParamAttr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('ParamAttrList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_ParamAttrList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_ParamAttrs(prim__state, prim__tokens):
        lcl_0 = parse_ParamAttrList(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('ParamAttrs', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_ParamList(prim__state, prim__tokens):
        lcl_0 = parse_Param(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('ParamList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_ParamList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Params(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 30):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 9):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 26):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 18):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 20):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 19):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 17):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 27):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = prim__tokens.offset
                    _off_1 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_4 = lcl_4.idint
                        if (lcl_4 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_4 = _py_local_t
                            _slot_1 = lcl_4
                            lcl_4 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_2 is None)
                            if lcl_4:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ... not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                                lcl_4 = lcl_5
                            else:
                                lcl_5 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_5
                                lcl_5 = (_slot_0, _slot_local__1)
                                lcl_5 = prim__mk__ast('Params', lcl_5)
                                _slot_local__2 = lcl_5
                                lcl_5 = (True, _slot_local__2)
                                lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        else:
                            lcl_4 = (_slot_0,)
                            lcl_5 = prim__mk__ast('Params', lcl_4)
                            _slot_local__1 = lcl_5
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'Params got EOF')
                        lcl_4 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_4
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 12):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('Params', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_ParamList(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 13):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_5 = _py_local_t
                            _slot_1 = lcl_5
                            lcl_5 = 12
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_2 = lcl_5
                            lcl_5 = (_slot_2 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ... not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1, _slot_2)
                                _slot_local__1 = lcl_6
                                lcl_6 = (_slot_0, _slot_local__1)
                                lcl_6 = prim__mk__ast('Params', lcl_6)
                                _slot_local__2 = lcl_6
                                lcl_6 = (True, _slot_local__2)
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        else:
                            lcl_5 = (_slot_0,)
                            lcl_6 = prim__mk__ast('Params', lcl_5)
                            _slot_local__1 = lcl_6
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'Params got EOF')
                        lcl_5 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_5
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Params lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Params got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_PhiInst(prim__state, prim__tokens):
        lcl_0 = 80
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote phi not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Type(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = parse_IncList(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = lcl_1
                    _slot_2 = lcl_1
                    lcl_1 = (_slot_0, _slot_1, _slot_2)
                    lcl_1 = prim__mk__ast('PhiInst', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_PreemptionSpecifier(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 118):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('PreemptionSpecifier', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 117):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('PreemptionSpecifier', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'PreemptionSpecifier lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'PreemptionSpecifier got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_RetTerm(prim__state, prim__tokens):
        lcl_0 = 73
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote ret not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Type(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = prim__tokens.offset
                _off_1 = lcl_1
                lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_1:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 30):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 39):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 61):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 53):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 40):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 51):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 32):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 47):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 54):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 56):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 52):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 60):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 34):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 35):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 49):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 57):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 63):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 64):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 48):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 55):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 50):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 33):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 46):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 62):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 38):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 41):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 67):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 58):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 59):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 45):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 27):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 36):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 185):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 183):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 184):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_4 = _slot_2_check[0]
                        lcl_3 = (lcl_4 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_3 = _slot_2_check[1]
                            lcl_3 = lcl_3
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_0, _slot_1, _slot_2)
                            lcl_3 = prim__mk__ast('RetTerm', lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 182):
                        lcl_3 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_3
                        lcl_3 = _slot_2_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            lcl_4 = (_slot_0, _slot_1, _slot_2)
                            lcl_4 = prim__mk__ast('RetTerm', lcl_4)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_4 = prim__mk__ast('RetTerm', lcl_3)
                        _slot_local__1 = lcl_4
                        lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_off_1, 'RetTerm got EOF')
                    lcl_3 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_3
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'BOF not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TopLevelEntityList(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'EOF not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = (_slot_0, _slot_1, _slot_2)
                    lcl_1 = prim__mk__ast('START', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_SelectInst(prim__state, prim__tokens):
        lcl_0 = 81
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote select not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_TypeValue(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_4 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote , not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_TypeValue(prim__state, prim__tokens)
                            _slot_5_check = lcl_2
                            lcl_2 = _slot_5_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_5_check
                            else:
                                lcl_3 = _slot_5_check[1]
                                lcl_3 = lcl_3
                                _slot_5 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                lcl_3 = prim__mk__ast('SelectInst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_SepTypeValueList(prim__state, prim__tokens):
        lcl_0 = parse_TypeValue(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('SepTypeValueList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_SepTypeValueList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_SourceFilename(prim__state, prim__tokens):
        lcl_0 = 5
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote source_filename not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = 6
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_1 = prim__tokens.offset
                lcl_1 = (lcl_1, 'quote = not match')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
            else:
                lcl_1 = parse_StrLit(prim__state, prim__tokens)
                _slot_2_check = lcl_1
                lcl_1 = _slot_2_check[0]
                lcl_1 = (lcl_1 is False)
                if lcl_1:
                    lcl_1 = _slot_2_check
                else:
                    lcl_2 = _slot_2_check[1]
                    lcl_2 = lcl_2
                    _slot_2 = lcl_2
                    lcl_2 = (_slot_0, _slot_1, _slot_2)
                    lcl_2 = prim__mk__ast('SourceFilename', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_StoreInst(prim__state, prim__tokens):
        lcl_0 = 71
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote store not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 30):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 72):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = parse_Type(prim__state, prim__tokens)
                    _slot_2_check = lcl_2
                    lcl_3 = _slot_2_check[0]
                    lcl_1 = (lcl_3 is False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_1 = _slot_2_check[1]
                        lcl_1 = lcl_1
                        _slot_2 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_3_check = lcl_1
                        lcl_1 = _slot_3_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_3_check
                        else:
                            lcl_1 = _slot_3_check[1]
                            lcl_1 = lcl_1
                            _slot_3 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_4 = lcl_1
                            lcl_1 = (_slot_4 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_5_check = lcl_1
                                lcl_1 = _slot_5_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_5_check
                                else:
                                    lcl_2 = _slot_5_check[1]
                                    lcl_2 = lcl_2
                                    _slot_5 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_6_check = lcl_2
                                    lcl_2 = _slot_6_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_6_check
                                    else:
                                        lcl_2 = _slot_6_check[1]
                                        lcl_2 = lcl_2
                                        _slot_6 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_7 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_8_check = lcl_4
                                                lcl_4 = _slot_8_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_8_check
                                                else:
                                                    lcl_5 = _slot_8_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_8 = lcl_5
                                                    lcl_5 = (_slot_7, _slot_8)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 18):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 20):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 17):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 22):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_1
                        lcl_1 = _slot_2_check[0]
                        lcl_1 = (lcl_1 is False)
                        if lcl_1:
                            lcl_1 = _slot_2_check
                        else:
                            lcl_1 = _slot_2_check[1]
                            lcl_1 = lcl_1
                            _slot_2 = lcl_1
                            lcl_1 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_1):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_1 = _py_local_tk
                            _slot_3 = lcl_1
                            lcl_1 = (_slot_3 is None)
                            if lcl_1:
                                lcl_1 = prim__tokens.offset
                                lcl_1 = (lcl_1, 'quote , not match')
                                lcl_1 = prim__cons(lcl_1, prim__nil)
                                lcl_1 = lcl_1
                                lcl_1 = (False, lcl_1)
                            else:
                                lcl_1 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_1
                                lcl_1 = _slot_4_check[0]
                                lcl_1 = (lcl_1 is False)
                                if lcl_1:
                                    lcl_1 = _slot_4_check
                                else:
                                    lcl_2 = _slot_4_check[1]
                                    lcl_2 = lcl_2
                                    _slot_4 = lcl_2
                                    lcl_2 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_2
                                    lcl_2 = _slot_5_check[0]
                                    lcl_2 = (lcl_2 is False)
                                    if lcl_2:
                                        lcl_2 = _slot_5_check
                                    else:
                                        lcl_2 = _slot_5_check[1]
                                        lcl_2 = lcl_2
                                        _slot_5 = lcl_2
                                        lcl_2 = prim__tokens.offset
                                        _off_3 = lcl_2
                                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_2:
                                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_4 = lcl_4.idint
                                            if (lcl_4 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_4 = _py_local_t
                                                _slot_6 = lcl_4
                                                lcl_4 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_4
                                                lcl_4 = _slot_7_check[0]
                                                lcl_4 = (lcl_4 is False)
                                                if lcl_4:
                                                    lcl_4 = _slot_7_check
                                                else:
                                                    lcl_5 = _slot_7_check[1]
                                                    lcl_5 = lcl_5
                                                    _slot_7 = lcl_5
                                                    lcl_5 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_5
                                                    lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                    _slot_local__2 = lcl_5
                                                    lcl_5 = (True, _slot_local__2)
                                                    lcl_4 = lcl_5
                                                lcl_3 = lcl_4
                                            else:
                                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_4 = prim__mk__ast('StoreInst', lcl_4)
                                                _slot_local__1 = lcl_4
                                                lcl_4 = (True, _slot_local__1)
                                                lcl_3 = lcl_4
                                            lcl_2 = lcl_3
                                        else:
                                            lcl_3 = (_off_3, 'StoreInst got EOF')
                                            lcl_3 = prim__cons(lcl_3, prim__nil)
                                            lcl_3 = lcl_3
                                            lcl_3 = (False, lcl_3)
                                            lcl_2 = lcl_3
                                    lcl_1 = lcl_2
                        lcl_4 = lcl_1
                    lcl_0 = lcl_4
                elif (lcl_1 == 185):
                    lcl_1 = parse_Type(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_3 = (lcl_2 is False)
                    if lcl_3:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        lcl_2 = parse_Value(prim__state, prim__tokens)
                        _slot_2_check = lcl_2
                        lcl_2 = _slot_2_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_2_check
                        else:
                            lcl_2 = _slot_2_check[1]
                            lcl_2 = lcl_2
                            _slot_2 = lcl_2
                            lcl_2 = 13
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote , not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = parse_Type(prim__state, prim__tokens)
                                _slot_4_check = lcl_2
                                lcl_2 = _slot_4_check[0]
                                lcl_2 = (lcl_2 is False)
                                if lcl_2:
                                    lcl_2 = _slot_4_check
                                else:
                                    lcl_3 = _slot_4_check[1]
                                    lcl_3 = lcl_3
                                    _slot_4 = lcl_3
                                    lcl_3 = parse_Value(prim__state, prim__tokens)
                                    _slot_5_check = lcl_3
                                    lcl_3 = _slot_5_check[0]
                                    lcl_3 = (lcl_3 is False)
                                    if lcl_3:
                                        lcl_3 = _slot_5_check
                                    else:
                                        lcl_3 = _slot_5_check[1]
                                        lcl_3 = lcl_3
                                        _slot_5 = lcl_3
                                        lcl_3 = prim__tokens.offset
                                        _off_3 = lcl_3
                                        lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                        if lcl_3:
                                            lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                            lcl_5 = lcl_5.idint
                                            if (lcl_5 == 13):
                                                _py_local_i = prim__tokens.offset
                                                _py_local_t = prim__tokens.array[_py_local_i]
                                                prim__tokens.offset = (_py_local_i + 1)
                                                lcl_5 = _py_local_t
                                                _slot_6 = lcl_5
                                                lcl_5 = parse_Alignment(prim__state, prim__tokens)
                                                _slot_7_check = lcl_5
                                                lcl_5 = _slot_7_check[0]
                                                lcl_5 = (lcl_5 is False)
                                                if lcl_5:
                                                    lcl_5 = _slot_7_check
                                                else:
                                                    lcl_6 = _slot_7_check[1]
                                                    lcl_6 = lcl_6
                                                    _slot_7 = lcl_6
                                                    lcl_6 = (_slot_6, _slot_7)
                                                    _slot_local__1 = lcl_6
                                                    lcl_6 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_local__1)
                                                    lcl_6 = prim__mk__ast('StoreInst', lcl_6)
                                                    _slot_local__2 = lcl_6
                                                    lcl_6 = (True, _slot_local__2)
                                                    lcl_5 = lcl_6
                                                lcl_4 = lcl_5
                                            else:
                                                lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5)
                                                lcl_5 = prim__mk__ast('StoreInst', lcl_5)
                                                _slot_local__1 = lcl_5
                                                lcl_5 = (True, _slot_local__1)
                                                lcl_4 = lcl_5
                                            lcl_3 = lcl_4
                                        else:
                                            lcl_4 = (_off_3, 'StoreInst got EOF')
                                            lcl_4 = prim__cons(lcl_4, prim__nil)
                                            lcl_4 = lcl_4
                                            lcl_4 = (False, lcl_4)
                                            lcl_3 = lcl_4
                                    lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'StoreInst lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_3 = lcl_2
                    lcl_4 = (False, lcl_3)
                    lcl_0 = lcl_4
            else:
                lcl_0 = (_off_1, 'StoreInst got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_StrLit(prim__state, prim__tokens):
        lcl_0 = 187
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'str not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('StrLit', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_StructConst(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 30):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 31):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_1 = lcl_3
                        lcl_3 = (_slot_0, _slot_1)
                        lcl_3 = prim__mk__ast('StructConst', lcl_3)
                        _slot_local__1 = lcl_3
                        lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 30):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 9):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 26):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 18):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 21):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 20):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 19):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 17):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 23):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 22):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 27):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    elif (lcl_3 == 185):
                        lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                        _slot_1_check = lcl_3
                        lcl_3 = _slot_1_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = 31
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_2 = lcl_3
                            lcl_3 = (_slot_2 is None)
                            if lcl_3:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote } not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                            else:
                                lcl_3 = (_slot_0, _slot_1, _slot_2)
                                lcl_3 = prim__mk__ast('StructConst', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'StructConst lookahead failed')
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_3
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                else:
                    lcl_2 = (_off_1, 'StructConst got EOF')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = 30
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_1 = lcl_2
                lcl_2 = (_slot_1 is None)
                if lcl_2:
                    lcl_2 = prim__tokens.offset
                    lcl_2 = (lcl_2, 'quote { not match')
                    lcl_2 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_2
                    lcl_2 = (False, lcl_2)
                else:
                    lcl_2 = prim__tokens.offset
                    _off_2 = lcl_2
                    lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_2:
                        lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_3 = lcl_3.idint
                        if (lcl_3 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_3 = _py_local_t
                            _slot_2 = lcl_3
                            lcl_3 = 37
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_3):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_3 = _py_local_tk
                            _slot_3 = lcl_3
                            lcl_3 = (_slot_3 is None)
                            if lcl_3:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote > not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 30):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 9):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 26):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 18):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 21):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 20):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 19):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 17):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 23):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 22):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 27):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_4):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_4 = _py_local_tk
                                _slot_3 = lcl_4
                                lcl_4 = (_slot_3 is None)
                                if lcl_4:
                                    lcl_4 = prim__tokens.offset
                                    lcl_4 = (lcl_4, 'quote } not match')
                                    lcl_4 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_4
                                    lcl_4 = (False, lcl_4)
                                else:
                                    lcl_4 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote > not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_5 = prim__mk__ast('StructConst', lcl_5)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        elif (lcl_3 == 185):
                            lcl_3 = parse_TypeConstList(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_4 = _slot_2_check[0]
                            lcl_3 = (lcl_4 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                lcl_3 = 31
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote } not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 37
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote > not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4)
                                        lcl_4 = prim__mk__ast('StructConst', lcl_4)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                        lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'StructConst lookahead failed')
                            lcl_3 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_3
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                    else:
                        lcl_2 = (_off_2, 'StructConst got EOF')
                        lcl_3 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_3
                        lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'StructConst lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'StructConst got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_StructType(prim__state, prim__tokens):
        lcl_0 = 30
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote { not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 31):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = (_slot_0, _slot_1)
                    lcl_1 = prim__mk__ast('StructType', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 30):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 9):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 26):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 18):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 20):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 19):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 17):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 22):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 27):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 185):
                    lcl_1 = parse_TypeList(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        lcl_1 = 31
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote } not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = (_slot_0, _slot_1, _slot_2)
                            lcl_1 = prim__mk__ast('StructType', lcl_1)
                            _slot_local__1 = lcl_1
                            lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'StructType lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'StructType got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_SwitchTerm(prim__state, prim__tokens):
        lcl_0 = 75
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote switch not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_TypeValue(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 13
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote , not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_LabelType(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        lcl_2 = parse_LocalName(prim__state, prim__tokens)
                        _slot_4_check = lcl_2
                        lcl_2 = _slot_4_check[0]
                        lcl_2 = (lcl_2 is False)
                        if lcl_2:
                            lcl_2 = _slot_4_check
                        else:
                            lcl_2 = _slot_4_check[1]
                            lcl_2 = lcl_2
                            _slot_4 = lcl_2
                            lcl_2 = 27
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_5 = lcl_2
                            lcl_2 = (_slot_5 is None)
                            if lcl_2:
                                lcl_2 = prim__tokens.offset
                                lcl_2 = (lcl_2, 'quote [ not match')
                                lcl_2 = prim__cons(lcl_2, prim__nil)
                                lcl_2 = lcl_2
                                lcl_2 = (False, lcl_2)
                            else:
                                lcl_2 = prim__tokens.offset
                                _off_3 = lcl_2
                                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_2:
                                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_3 = lcl_3.idint
                                    if (lcl_3 == 18):
                                        lcl_3 = parse_Cases(prim__state, prim__tokens)
                                        _slot_6_check = lcl_3
                                        lcl_3 = _slot_6_check[0]
                                        lcl_3 = (lcl_3 is False)
                                        if lcl_3:
                                            lcl_3 = _slot_6_check
                                        else:
                                            lcl_3 = _slot_6_check[1]
                                            lcl_3 = lcl_3
                                            _slot_6 = lcl_3
                                            lcl_3 = 29
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_3):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_3 = _py_local_tk
                                            _slot_7 = lcl_3
                                            lcl_3 = (_slot_7 is None)
                                            if lcl_3:
                                                lcl_3 = prim__tokens.offset
                                                lcl_3 = (lcl_3, 'quote ] not match')
                                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                                lcl_3 = lcl_3
                                                lcl_3 = (False, lcl_3)
                                            else:
                                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                                lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                                _slot_local__1 = lcl_3
                                                lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    elif (lcl_3 == 21):
                                        lcl_3 = parse_Cases(prim__state, prim__tokens)
                                        _slot_6_check = lcl_3
                                        lcl_3 = _slot_6_check[0]
                                        lcl_3 = (lcl_3 is False)
                                        if lcl_3:
                                            lcl_3 = _slot_6_check
                                        else:
                                            lcl_3 = _slot_6_check[1]
                                            lcl_3 = lcl_3
                                            _slot_6 = lcl_3
                                            lcl_3 = 29
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_3):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_3 = _py_local_tk
                                            _slot_7 = lcl_3
                                            lcl_3 = (_slot_7 is None)
                                            if lcl_3:
                                                lcl_3 = prim__tokens.offset
                                                lcl_3 = (lcl_3, 'quote ] not match')
                                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                                lcl_3 = lcl_3
                                                lcl_3 = (False, lcl_3)
                                            else:
                                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                                lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                                _slot_local__1 = lcl_3
                                                lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    elif (lcl_3 == 20):
                                        lcl_3 = parse_Cases(prim__state, prim__tokens)
                                        _slot_6_check = lcl_3
                                        lcl_3 = _slot_6_check[0]
                                        lcl_3 = (lcl_3 is False)
                                        if lcl_3:
                                            lcl_3 = _slot_6_check
                                        else:
                                            lcl_3 = _slot_6_check[1]
                                            lcl_3 = lcl_3
                                            _slot_6 = lcl_3
                                            lcl_3 = 29
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_3):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_3 = _py_local_tk
                                            _slot_7 = lcl_3
                                            lcl_3 = (_slot_7 is None)
                                            if lcl_3:
                                                lcl_3 = prim__tokens.offset
                                                lcl_3 = (lcl_3, 'quote ] not match')
                                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                                lcl_3 = lcl_3
                                                lcl_3 = (False, lcl_3)
                                            else:
                                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                                lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                                _slot_local__1 = lcl_3
                                                lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    elif (lcl_3 == 19):
                                        lcl_3 = parse_Cases(prim__state, prim__tokens)
                                        _slot_6_check = lcl_3
                                        lcl_3 = _slot_6_check[0]
                                        lcl_3 = (lcl_3 is False)
                                        if lcl_3:
                                            lcl_3 = _slot_6_check
                                        else:
                                            lcl_3 = _slot_6_check[1]
                                            lcl_3 = lcl_3
                                            _slot_6 = lcl_3
                                            lcl_3 = 29
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_3):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_3 = _py_local_tk
                                            _slot_7 = lcl_3
                                            lcl_3 = (_slot_7 is None)
                                            if lcl_3:
                                                lcl_3 = prim__tokens.offset
                                                lcl_3 = (lcl_3, 'quote ] not match')
                                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                                lcl_3 = lcl_3
                                                lcl_3 = (False, lcl_3)
                                            else:
                                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                                lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                                _slot_local__1 = lcl_3
                                                lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    elif (lcl_3 == 17):
                                        lcl_3 = parse_Cases(prim__state, prim__tokens)
                                        _slot_6_check = lcl_3
                                        lcl_3 = _slot_6_check[0]
                                        lcl_3 = (lcl_3 is False)
                                        if lcl_3:
                                            lcl_3 = _slot_6_check
                                        else:
                                            lcl_3 = _slot_6_check[1]
                                            lcl_3 = lcl_3
                                            _slot_6 = lcl_3
                                            lcl_3 = 29
                                            try:
                                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                if (_py_local_tk.idint is lcl_3):
                                                    prim__tokens.offset += 1
                                                else:
                                                    _py_local_tk = None
                                            except IndexError:
                                                _py_local_tk = None
                                            lcl_3 = _py_local_tk
                                            _slot_7 = lcl_3
                                            lcl_3 = (_slot_7 is None)
                                            if lcl_3:
                                                lcl_3 = prim__tokens.offset
                                                lcl_3 = (lcl_3, 'quote ] not match')
                                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                                lcl_3 = lcl_3
                                                lcl_3 = (False, lcl_3)
                                            else:
                                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6, _slot_7)
                                                lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                                _slot_local__1 = lcl_3
                                                lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    elif (lcl_3 == 29):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_3 = _py_local_t
                                        _slot_6 = lcl_3
                                        lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3, _slot_4, _slot_5, _slot_6)
                                        lcl_3 = prim__mk__ast('SwitchTerm', lcl_3)
                                        _slot_local__1 = lcl_3
                                        lcl_3 = (True, _slot_local__1)
                                        lcl_2 = lcl_3
                                    else:
                                        lcl_3 = (_off_3, 'SwitchTerm lookahead failed')
                                        lcl_3 = prim__cons(lcl_3, prim__nil)
                                        lcl_3 = lcl_3
                                        lcl_3 = (False, lcl_3)
                                        lcl_2 = lcl_3
                                else:
                                    lcl_2 = (_off_3, 'SwitchTerm got EOF')
                                    lcl_2 = prim__cons(lcl_2, prim__nil)
                                    lcl_2 = lcl_2
                                    lcl_2 = (False, lcl_2)
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Terminator(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 75):
                lcl_2 = parse_SwitchTerm(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Terminator', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 73):
                lcl_2 = parse_RetTerm(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Terminator', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 74):
                lcl_2 = parse_BrTerm(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Terminator', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Terminator lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Terminator got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_TopLevelEntity(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 5):
                lcl_2 = parse_SourceFilename(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('TopLevelEntity', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 70):
                lcl_2 = parse_FunctionDef(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('TopLevelEntity', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 69):
                lcl_2 = parse_FunctionDecl(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('TopLevelEntity', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_TypeDef(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('TopLevelEntity', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 184):
                lcl_2 = parse_Global(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('TopLevelEntity', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'TopLevelEntity lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'TopLevelEntity got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_TopLevelEntityList(prim__state, prim__tokens):
        lcl_0 = parse_TopLevelEntity(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('TopLevelEntityList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_TopLevelEntityList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 30):
                lcl_2 = parse_StructType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 9):
                lcl_2 = parse_VoidType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 26):
                lcl_2 = parse_LabelType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 18):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 20):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 19):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 17):
                lcl_2 = parse_IntType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_FloatType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_FloatType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 27):
                lcl_2 = parse_ArrayType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_NamedType(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('FirstClassType', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (_slot_local__1,)
                    lcl_2 = prim__mk__ast('Type', lcl_2)
                    _slot_local__2 = lcl_2
                    lcl_2 = lr_loop_Type(_slot_local__2, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Type lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_TypeConstList(prim__state, prim__tokens):
        lcl_0 = parse_TypeConstant(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('TypeConstList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_TypeConstList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_TypeConstant(prim__state, prim__tokens):
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = parse_Constant(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_0 = _slot_1_check[1]
                lcl_0 = lcl_0
                _slot_1 = lcl_0
                lcl_0 = (_slot_0, _slot_1)
                lcl_0 = prim__mk__ast('TypeConstant', lcl_0)
                _slot_local__1 = lcl_0
                lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_TypeDef(prim__state, prim__tokens):
        lcl_0 = parse_LocalName(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = 6
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_0 = prim__tokens.offset
                lcl_0 = (lcl_0, 'quote = not match')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
            else:
                lcl_0 = 8
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_0):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_0 = _py_local_tk
                _slot_2 = lcl_0
                lcl_0 = (_slot_2 is None)
                if lcl_0:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote type not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = prim__tokens.offset
                    _off_2 = lcl_1
                    lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_1:
                        lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_2 = lcl_2.idint
                        if (lcl_2 == 30):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 9):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 7):
                            lcl_2 = parse_OpaqueType(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 26):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 18):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 21):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 20):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 19):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 17):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 23):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 22):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 27):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_3 = prim__mk__ast('TypeDef', lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 185):
                            lcl_2 = parse_Type(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_3 = _slot_3_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                lcl_2 = (_slot_0, _slot_1, _slot_2, _slot_3)
                                lcl_2 = prim__mk__ast('TypeDef', lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'TypeDef lookahead failed')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    else:
                        lcl_1 = (_off_2, 'TypeDef got EOF')
                        lcl_2 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = lcl_2
                        lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
        return lcl_0

    def parse_TypeList(prim__state, prim__tokens):
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('TypeList', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_TypeList(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_TypeValue(prim__state, prim__tokens):
        lcl_0 = parse_Type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = parse_Value(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_0 = _slot_1_check[1]
                lcl_0 = lcl_0
                _slot_1 = lcl_0
                lcl_0 = (_slot_0, _slot_1)
                lcl_0 = prim__mk__ast('TypeValue', lcl_0)
                _slot_local__1 = lcl_0
                lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_UndefConst(prim__state, prim__tokens):
        lcl_0 = 40
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote undef not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('UndefConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_UnnamedAddr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 123):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('UnnamedAddr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 122):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = (_slot_0,)
                lcl_2 = prim__mk__ast('UnnamedAddr', lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'UnnamedAddr lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'UnnamedAddr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Value(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 30):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 39):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 61):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 40):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 35):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 33):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 38):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 41):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 27):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 185):
                lcl_2 = parse_LocalName(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 183):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 184):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('Value', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 182):
                lcl_2 = parse_Constant(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('Value', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Value lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Value got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ValueInstruction(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 53):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 51):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 47):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 54):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 56):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 81):
                lcl_2 = parse_SelectInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 52):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 80):
                lcl_2 = parse_PhiInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 60):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 49):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 57):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 77):
                lcl_2 = parse_LoadInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 63):
                lcl_2 = parse_InsValInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 78):
                lcl_2 = parse_CmpInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 64):
                lcl_2 = parse_GEPInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 48):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 55):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 50):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 79):
                lcl_2 = parse_CmpInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 46):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 62):
                lcl_2 = parse_ExtValInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 67):
                lcl_2 = parse_BitcastInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 58):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 59):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 76):
                lcl_2 = parse_AllocaInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = (_slot_0,)
                    lcl_3 = prim__mk__ast('ValueInstruction', lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 45):
                lcl_2 = parse_BinInst(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    lcl_2 = (_slot_0,)
                    lcl_2 = prim__mk__ast('ValueInstruction', lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'ValueInstruction lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ValueInstruction got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_VoidType(prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote void not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('VoidType', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_ZeroInitializerConst(prim__state, prim__tokens):
        lcl_0 = 39
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote zeroinitializer not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('ZeroInitializerConst', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_name(prim__state, prim__tokens):
        lcl_0 = 186
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'identifier not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('name', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0
    return parse_START
